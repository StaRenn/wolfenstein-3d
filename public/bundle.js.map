{"version":3,"file":"bundle.js","sources":["webpack://wolfenstein-3d/./src/constants/config.ts","webpack://wolfenstein-3d/./src/constants/hud.ts","webpack://wolfenstein-3d/./src/controllers/Animation.ts","webpack://wolfenstein-3d/./src/controllers/Timeout.ts","webpack://wolfenstein-3d/./src/entities/GameMap.ts","webpack://wolfenstein-3d/./src/entities/Scene.ts","webpack://wolfenstein-3d/./src/entities/actors/Guard.ts","webpack://wolfenstein-3d/./src/entities/actors/Wolf.ts","webpack://wolfenstein-3d/./src/entities/actors/abstract/Actor.ts","webpack://wolfenstein-3d/./src/entities/actors/abstract/Enemy.ts","webpack://wolfenstein-3d/./src/entities/obstacles/Door.ts","webpack://wolfenstein-3d/./src/entities/obstacles/Item.ts","webpack://wolfenstein-3d/./src/entities/obstacles/Sprite.ts","webpack://wolfenstein-3d/./src/entities/obstacles/Wall.ts","webpack://wolfenstein-3d/./src/entities/obstacles/abstract/DynamicObstacle.ts","webpack://wolfenstein-3d/./src/entities/obstacles/abstract/StaticObstacle.ts","webpack://wolfenstein-3d/./src/main.ts","webpack://wolfenstein-3d/./src/services/Camera.ts","webpack://wolfenstein-3d/./src/services/EventEmitter/EventEmitter.ts","webpack://wolfenstein-3d/./src/services/MapParser.ts","webpack://wolfenstein-3d/./src/services/NavigationMap/NavigationMap.ts","webpack://wolfenstein-3d/./src/services/NavigationMap/NavigationNode.ts","webpack://wolfenstein-3d/./src/services/Pathfinder.ts","webpack://wolfenstein-3d/./src/services/Ray.ts","webpack://wolfenstein-3d/./src/types/typeGuards.ts","webpack://wolfenstein-3d/./src/utils/frameSets.ts","webpack://wolfenstein-3d/./src/utils/getImageWithSource.ts","webpack://wolfenstein-3d/./src/utils/getRelativeChunkMultiplier.ts","webpack://wolfenstein-3d/./src/utils/getTextureOffset.ts","webpack://wolfenstein-3d/./src/utils/maths.ts","webpack://wolfenstein-3d/./src/view/Hud.ts","webpack://wolfenstein-3d/./src/view/Minimap.ts"],"sourcesContent":["import { fillWeaponFrameSet } from 'src/utils/frameSets';\nimport { getImageWithSource } from 'src/utils/getImageWithSource';\nimport { toRadians } from 'src/utils/maths';\n\nimport type { ItemPurpose, Vertex, Weapons } from 'src/types';\n\n// core, do not change\nexport const TILE_SIZE = 10;\nexport const DEVICE_PIXEL_RATIO = window.devicePixelRatio;\nexport const HALF_TILE_SIZE = TILE_SIZE / 2;\nexport const RAY_LENGTH = TILE_SIZE * 48;\nexport const DOOR_IDS = [27, 28, 33, 34, 35, 36];\nexport const AMMO_ID = 34;\nexport const DOOR_SIDE_WALL_TEXTURE_ID = 30;\nexport const DOOR_SIDE_WALL_TEXTURE_DARK_ID = 29;\nexport const TEXTURE_SIZE = 64;\nexport const DEFAULT_FRAME_DURATION = 1000 / 60;\nexport const RESOLUTIONS_SCALE_VALUES = [0.5, 1] as const;\n\n// secondary\nexport const DOOR_TIMEOUT = 4000;\nexport const HUD_WIDTH_COEFFICIENT = 0.6;\nexport const MAP_SCALE = 0.6;\nexport const OBSTACLES_MOVE_SPEED = TILE_SIZE / (TILE_SIZE * 4);\nexport const ACTOR_SPEED = 1;\nexport const ENEMY_FOV = toRadians(120);\nexport const WOLF_ATTACK_FOV = toRadians(15);\n\n// defaults\n// 1 / RESOLUTION_SCALE must return integer value, because we cant render 0.1 of pixel, 0.5 of pixel etc\nexport const DEFAULT_FOV_DEGREES = 90;\nexport const DEFAULT_FOV = toRadians(DEFAULT_FOV_DEGREES);\n// DO NOT SET MORE THAN 1\nexport const DEFAULT_RESOLUTION_SCALE: typeof RESOLUTIONS_SCALE_VALUES[number] = 0.5;\n\n// globals\nwindow.TIME_SCALE = 1;\n\nexport const WEAPONS: Weapons = {\n  KNIFE: {\n    frameSet: fillWeaponFrameSet('KNIFE', 50),\n    maxDistance: TILE_SIZE * 2,\n    minDamage: 50,\n    maxDamage: 50,\n    frameDuration: 50,\n    ammoPerAttack: 0,\n    attackFrameIdx: 2,\n    noiseDistance: 0,\n    icon: getImageWithSource('src/static/assets/hud/knife.png'),\n  },\n  PISTOL: {\n    frameSet: fillWeaponFrameSet('PISTOL', 65),\n    maxDistance: TILE_SIZE * 20,\n    minDamage: 25,\n    maxDamage: 100,\n    frameDuration: 65,\n    ammoPerAttack: 1,\n    attackFrameIdx: 2,\n    noiseDistance: TILE_SIZE * 6,\n    icon: getImageWithSource('src/static/assets/hud/pistol.png'),\n  },\n  MACHINE_GUN: {\n    frameSet: fillWeaponFrameSet('MACHINE_GUN', 30),\n    maxDistance: TILE_SIZE * 20,\n    minDamage: 20,\n    maxDamage: 55,\n    frameDuration: 30,\n    ammoPerAttack: 1,\n    attackFrameIdx: 2,\n    noiseDistance: TILE_SIZE * 10,\n    icon: getImageWithSource('src/static/assets/hud/machine_gun.png'),\n  },\n};\n\nexport const ITEMS_PURPOSES: { readonly [key: number]: ItemPurpose } = {\n  34: {\n    affects: 'ammo',\n    value: 8,\n  },\n  35: {\n    affects: 'health',\n    value: 10,\n  },\n  39: {\n    affects: 'health',\n    value: 25,\n  },\n  36: {\n    affects: 'score',\n    value: 100,\n  },\n  37: {\n    affects: 'score',\n    value: 1,\n  },\n  38: {\n    affects: 'score',\n    value: 500,\n  },\n  42: {\n    affects: 'score',\n    value: 1000,\n  },\n  40: {\n    affects: 'weapons',\n    value: 'MACHINE_GUN',\n  },\n  41: {\n    affects: 'weapons',\n    value: 'MACHINE_GUN', // todo minigun\n  },\n} as const;\n\nexport const INTERSECTION_TYPES = {\n  VERTICAL: 'VERTICAL',\n  HORIZONTAL: 'HORIZONTAL',\n} as const;\n\nexport const OBSTACLE_SIDES = {\n  TOP: 'TOP',\n  BOTTOM: 'BOTTOM',\n  LEFT: 'LEFT',\n  RIGHT: 'RIGHT',\n} as const;\n\nexport const OBSTACLE_CORNERS = {\n  TOP_LEFT: 'TOP_LEFT',\n  TOP_RIGHT: 'TOP_RIGHT',\n  BOTTOM_LEFT: 'BOTTOM_LEFT',\n  BOTTOM_RIGHT: 'BOTTOM_RIGHT',\n} as const;\n\nexport const NEIGHBOR_OFFSET: Record<keyof typeof OBSTACLE_SIDES, Vertex> = {\n  [OBSTACLE_SIDES.TOP]: { x: 0, y: -1 },\n  [OBSTACLE_SIDES.BOTTOM]: { x: 0, y: 1 },\n  [OBSTACLE_SIDES.LEFT]: { x: -1, y: 0 },\n  [OBSTACLE_SIDES.RIGHT]: { x: 1, y: 0 },\n} as const;\n\nexport const NEIGHBOR_OFFSET_WITH_CORNERS: Record<\n  keyof typeof OBSTACLE_CORNERS | keyof typeof NEIGHBOR_OFFSET,\n  Vertex\n> = {\n  ...NEIGHBOR_OFFSET,\n  [OBSTACLE_CORNERS.TOP_LEFT]: { x: -1, y: -1 },\n  [OBSTACLE_CORNERS.TOP_RIGHT]: { x: 1, y: -1 },\n  [OBSTACLE_CORNERS.BOTTOM_LEFT]: { x: -1, y: 1 },\n  [OBSTACLE_CORNERS.BOTTOM_RIGHT]: { x: 1, y: 1 },\n};\n\nexport const NEIGHBORS_NEXT_TO_CORNERS = {\n  [OBSTACLE_CORNERS.TOP_LEFT]: [NEIGHBOR_OFFSET.BOTTOM, NEIGHBOR_OFFSET.RIGHT],\n  [OBSTACLE_CORNERS.TOP_RIGHT]: [NEIGHBOR_OFFSET.BOTTOM, NEIGHBOR_OFFSET.LEFT],\n  [OBSTACLE_CORNERS.BOTTOM_LEFT]: [NEIGHBOR_OFFSET.TOP, NEIGHBOR_OFFSET.RIGHT],\n  [OBSTACLE_CORNERS.BOTTOM_RIGHT]: [NEIGHBOR_OFFSET.TOP, NEIGHBOR_OFFSET.LEFT],\n} as const;\n\nexport const ENEMY_FACING_DIRECTION_MAP = {\n  WEST: 0,\n  NORTH: 90,\n  EAST: 180,\n  SOUTH: -90,\n} as const;\n","import { fillPortraitFrameSet } from 'src/utils/frameSets';\nimport { getImageWithSource } from 'src/utils/getImageWithSource';\n\nimport type { HealthFrameSets } from 'src/types';\n\nexport const HUD_PANEL = {\n  TEXTURE: getImageWithSource('src/static/assets/hud/panel.png'),\n  WIDTH: 400,\n  HEIGHT: 40,\n  INFO_Y_OFFSET: 16,\n  WEAPON_Y_OFFSET: 8,\n  LEVEL_X_OFFSET: 65,\n  SCORE_X_OFFSET: 111,\n  LIVES_X_OFFSET: 156,\n  HEALTH_X_OFFSET: 219,\n  AMMO_X_OFFSET: 262,\n  WEAPON_X_OFFSET: 296,\n  PORTRAIT_X_OFFSET: 174,\n  PORTRAIT_Y_OFFSET: 5,\n} as const;\n\nexport const FONT_IMAGE = getImageWithSource('src/static/assets/hud/font.png');\n\nexport const FONT_SYMBOL_WIDTH = 8;\nexport const FONT_SYMBOL_HEIGHT = 16;\n\nexport const WEAPON_ICON_WIDTH = 48;\nexport const WEAPON_ICON_HEIGHT = 24;\n\nexport const PORTRAIT_WIDTH = 30;\nexport const PORTRAIT_HEIGHT = 31;\n\nexport const ACTOR_PORTRAIT_FRAME_SETS: HealthFrameSets = {\n  HEALTHY: fillPortraitFrameSet('HEALTHY'),\n  JUST_A_SCRATCH: fillPortraitFrameSet('JUST_A_SCRATCH'),\n  MINOR_DAMAGE: fillPortraitFrameSet('MINOR_DAMAGE'),\n  MODERATE_DAMAGE: fillPortraitFrameSet('MODERATE_DAMAGE'),\n  SEVERE_DAMAGE: fillPortraitFrameSet('SEVERE_DAMAGE'),\n  SUFFERING: fillPortraitFrameSet('SUFFERING'),\n  NEAR_DEATH: fillPortraitFrameSet('NEAR_DEATH'),\n  DEAD: [\n    {\n      data: getImageWithSource('src/static/assets/hud/portrait/dead/frame_0.png'),\n      duration: 10000,\n    },\n  ],\n};\n","import { Timeout } from './Timeout';\n\nimport type { Frame } from 'src/types';\n\ntype AnimationParams<FrameType extends Frame<unknown>> = {\n  emitter: Timeout['_emitter'];\n  frameSet: Animation<FrameType>['_frameSet'];\n  initialFrameIdx?: Animation<FrameType>['_currentFrameIdx'];\n  isLoopAnimation?: Animation<FrameType>['_isLoopAnimation'];\n  renderFunction?: Animation<FrameType>['_derivedRenderFunction'];\n  onAnimationEnd?: Animation<FrameType>['_onAnimationEnd'];\n  onAnimationStart?: Animation<FrameType>['_onAnimationStart'];\n  onFrameChange?: Animation<FrameType>['_onFrameChange'];\n};\n\nexport class Animation<FrameType extends Frame<unknown>> {\n  private _frameSet: FrameType[];\n  private _currentFrameIdx: number;\n  private _isLoopAnimation: boolean;\n  private _derivedRenderFunction: (frame: FrameType['data']) => void;\n  private _onAnimationEnd: () => void;\n  private _onAnimationStart: () => void;\n  private _onFrameChange: (frameIdx: number) => void;\n  private _timeout: Timeout;\n\n  constructor({\n    emitter,\n    frameSet,\n    initialFrameIdx = 0,\n    isLoopAnimation = false,\n    renderFunction = () => {},\n    onAnimationEnd = () => {},\n    onAnimationStart = () => {},\n    onFrameChange = () => {},\n  }: AnimationParams<FrameType>) {\n    this._frameSet = frameSet;\n    this._currentFrameIdx = initialFrameIdx;\n    this._derivedRenderFunction = renderFunction;\n    this._isLoopAnimation = isLoopAnimation;\n\n    this._onAnimationEnd = onAnimationEnd;\n    this._onAnimationStart = onAnimationStart;\n    this._onFrameChange = onFrameChange;\n\n    this._timeout = new Timeout(emitter, this.playAnimation.bind(this));\n\n    if (isLoopAnimation && this.currentFrame.duration !== Infinity) {\n      this._timeout.set(this.currentFrame.duration);\n    }\n  }\n\n  set onAnimationEnd(callback: Animation<FrameType>['_onAnimationEnd']) {\n    this._onAnimationEnd = callback;\n  }\n\n  set onAnimationStart(callback: Animation<FrameType>['_onAnimationStart']) {\n    this._onAnimationStart = callback;\n  }\n\n  set onFrameChange(callback: Animation<FrameType>['_onFrameChange']) {\n    this._onFrameChange = callback;\n  }\n\n  get currentFrameIdx() {\n    return this._currentFrameIdx;\n  }\n\n  get currentFrame() {\n    return this._frameSet[this._currentFrameIdx];\n  }\n\n  get isCurrentlyInTimeout() {\n    return !this._timeout.isExpired;\n  }\n\n  playAnimation() {\n    // if last frame: reset and call callbacks, else: set next frame\n    if (this._currentFrameIdx === this._frameSet.length - 1) {\n      this._timeout.reset();\n      this._currentFrameIdx = 0;\n\n      this._onAnimationEnd();\n\n      // if looped, start same animation\n      if (this._isLoopAnimation && this.currentFrame.duration !== Infinity) {\n        this._timeout.set(this.currentFrame.duration);\n      }\n    } else {\n      if (this._currentFrameIdx === 0) {\n        this._onAnimationStart();\n      }\n\n      this._currentFrameIdx += 1;\n\n      if (this.currentFrame.duration !== Infinity) {\n        this._timeout.set(this.currentFrame.duration);\n      }\n    }\n\n    this._onFrameChange(this._currentFrameIdx);\n  }\n\n  updateFrameSet(frameSet: FrameType[]) {\n    this._frameSet = frameSet;\n    this._currentFrameIdx = 0;\n    this._timeout.reset();\n\n    if (this._isLoopAnimation && this.currentFrame.duration !== Infinity) {\n      this._timeout.set(this.currentFrame.duration);\n    }\n  }\n\n  setActiveFrameIdx(frameIdx: number) {\n    if (frameIdx > this._frameSet.length - 1) {\n      throw Error(`Frame ${frameIdx} is out of bounds`);\n    }\n\n    this._currentFrameIdx = frameIdx;\n    this._timeout.reset();\n\n    if (this._isLoopAnimation && this.currentFrame.duration !== Infinity) {\n      this._timeout.set(this.currentFrame.duration);\n    }\n  }\n\n  render() {\n    this._derivedRenderFunction(this._frameSet[this._currentFrameIdx].data);\n  }\n}\n","import type { EventEmitter } from 'src/services/EventEmitter/EventEmitter';\n\nexport class Timeout {\n  private _timeoutTime: null | number;\n  private _onTimeoutExpire: (() => void) | null;\n  private _emitter: EventEmitter;\n\n  constructor(emitter: EventEmitter, onTimeoutExpire: Timeout['_onTimeoutExpire'] = null) {\n    this._timeoutTime = null;\n    this._onTimeoutExpire = onTimeoutExpire;\n    this._emitter = emitter;\n\n    this.registerEvents();\n  }\n\n  private registerEvents() {\n    this._emitter.on('frameUpdate', this.update.bind(this));\n  }\n\n  private update() {\n    if (this._timeoutTime) {\n      const currentTime = new Date().getTime();\n\n      // check expiration\n      if (currentTime > this._timeoutTime) {\n        this._timeoutTime = null;\n\n        if (this._onTimeoutExpire) {\n          this._onTimeoutExpire();\n        }\n      }\n    }\n  }\n\n  set onTimeoutExpire(callback: Timeout['_onTimeoutExpire']) {\n    this._onTimeoutExpire = callback;\n  }\n\n  get isExpired() {\n    return !this._timeoutTime;\n  }\n\n  reset() {\n    this._timeoutTime = null;\n  }\n\n  set(timeoutDuration: number) {\n    this._timeoutTime = new Date().getTime() + timeoutDuration;\n  }\n}\n","import type { EventEmitter } from 'src/services/EventEmitter/EventEmitter';\nimport { MapParser } from 'src/services/MapParser';\nimport { NavigationMap } from 'src/services/NavigationMap/NavigationMap';\n\nimport { Timeout } from 'src/controllers/Timeout';\n\nimport { AMMO_ID, DOOR_TIMEOUT, ITEMS_PURPOSES, TILE_SIZE } from 'src/constants/config';\n\nimport { getImageWithSource } from 'src/utils/getImageWithSource';\n\nimport type { Enemy } from './actors/abstract/Enemy';\nimport type { DoorObstacle } from './obstacles/Door';\nimport { ItemObstacle } from './obstacles/Item';\nimport type { WallObstacle } from './obstacles/Wall';\n\nimport type { Obstacle, ParsedMap, RawMap, Vertex } from 'src/types';\nimport { isDoor, isItem, isWall } from 'src/types/typeGuards';\n\nexport class GameMap {\n  private readonly _emitter: EventEmitter;\n\n  private _map: ParsedMap;\n  private _navigationMap: NavigationMap;\n  private _enemies: Enemy[];\n  private _obstacles: Obstacle[];\n  private _doors: DoorObstacle[];\n  private _currentlyMovingObstacles: (DoorObstacle | WallObstacle)[];\n  private _wolfMatrixPosition: Vertex;\n\n  public readonly startPosition: Vertex;\n\n  constructor(emitter: EventEmitter, rawMap: RawMap) {\n    this._emitter = emitter;\n\n    const { obstacles, doors, enemies, map, startPosition } = MapParser.parseMap(emitter, rawMap);\n\n    this._map = map;\n    this._navigationMap = new NavigationMap(this._map);\n    this._obstacles = obstacles;\n    this._doors = doors;\n    this._enemies = enemies;\n    this._currentlyMovingObstacles = [];\n    this._wolfMatrixPosition = {\n      x: Math.floor(startPosition.x / TILE_SIZE),\n      y: Math.floor(startPosition.y / TILE_SIZE),\n    };\n\n    this.startPosition = startPosition;\n\n    this.registerEvents();\n\n    this._emitter.emit('gameMapReady', this);\n  }\n\n  get map() {\n    return this._map;\n  }\n\n  get navigationMap() {\n    return this._navigationMap;\n  }\n\n  get enemies() {\n    return this._enemies;\n  }\n\n  get obstacles() {\n    return this._obstacles;\n  }\n\n  get doors() {\n    return this._doors;\n  }\n\n  get nonGridObstacles() {\n    return [...this._currentlyMovingObstacles, ...this._doors, ...this.enemies];\n  }\n\n  private registerEvents() {\n    this._emitter.on('wolfMatrixPositionChange', this.updateWolfMatrixPosition.bind(this));\n    this._emitter.on('frameUpdate', this.update.bind(this));\n    this._emitter.on('enemyDie', this.spawnAmmoOnDeadEnemy.bind(this));\n  }\n\n  private updateWolfMatrixPosition(position: Vertex) {\n    this._wolfMatrixPosition = position;\n  }\n\n  private spawnAmmoOnDeadEnemy(enemy: Enemy) {\n    const currentEntity = this._map[enemy.currentMatrixPosition.y][enemy.currentMatrixPosition.x];\n\n    if (currentEntity && isItem(currentEntity) && currentEntity.purpose.affects === 'ammo') {\n      currentEntity.purpose.value += ITEMS_PURPOSES[AMMO_ID].value as number;\n    } else if (!currentEntity) {\n      this._map[enemy.currentMatrixPosition.y][enemy.currentMatrixPosition.x] = new ItemObstacle({\n        position: {\n          x1: enemy.currentMatrixPosition.x * TILE_SIZE,\n          y1: enemy.currentMatrixPosition.y * TILE_SIZE,\n          x2: enemy.currentMatrixPosition.x * TILE_SIZE + TILE_SIZE,\n          y2: enemy.currentMatrixPosition.y * TILE_SIZE + TILE_SIZE,\n        },\n        hasCollision: false,\n        texture: getImageWithSource(`src/static/assets/sprites/items/${AMMO_ID}.png`),\n        rawValue: '34_SPRITE_HOLLOW_ITEM',\n        purpose: ITEMS_PURPOSES[AMMO_ID],\n      });\n    }\n  }\n\n  interactWithObstacle(obstacle: Obstacle) {\n    if ((!isDoor(obstacle) && !isWall(obstacle)) || !obstacle.isMovable) {\n      return;\n    }\n\n    if (!this._currentlyMovingObstacles.includes(obstacle)) {\n      this._currentlyMovingObstacles.push(obstacle);\n    }\n  }\n\n  update() {\n    this._currentlyMovingObstacles.forEach((obstacle) => {\n      const animationEnded = obstacle.move();\n\n      if (animationEnded) {\n        if (isDoor(obstacle) && !obstacle.isInStartPosition) {\n          obstacle.closeTimeout = new Timeout(this._emitter, () => {\n            // if player is near door, dont close door, instead reset timeout\n            if (\n              this._wolfMatrixPosition.x >= obstacle.endPositionMatrixCoordinates.x - 1 &&\n              this._wolfMatrixPosition.x <= obstacle.endPositionMatrixCoordinates.x + 1 &&\n              this._wolfMatrixPosition.y >= obstacle.endPositionMatrixCoordinates.y - 1 &&\n              this._wolfMatrixPosition.y <= obstacle.endPositionMatrixCoordinates.y + 1\n            ) {\n              obstacle.closeTimeout!.set(DOOR_TIMEOUT);\n\n              return;\n            }\n\n            obstacle.closeTimeout = null;\n            obstacle.hasCollision = true;\n\n            this._currentlyMovingObstacles.push(obstacle);\n          });\n\n          obstacle.closeTimeout.set(DOOR_TIMEOUT);\n          obstacle.hasCollision = false;\n        }\n      }\n\n      // swap matrix coordinates for collision update\n      if (isWall(obstacle) && animationEnded) {\n        this._map[obstacle.endPositionMatrixCoordinates.y][obstacle.endPositionMatrixCoordinates.x] = obstacle;\n        this._map[obstacle.matrixCoordinates.y][obstacle.matrixCoordinates.x] = null;\n\n        this._navigationMap.updateMap(this._map);\n      }\n\n      // remove obstacle from moving list on animation end\n      if (animationEnded) {\n        this._currentlyMovingObstacles = this._currentlyMovingObstacles.filter(\n          (movingObstacle) => movingObstacle !== obstacle\n        );\n      }\n    });\n  }\n}\n","import { Hud } from 'src/view/Hud';\nimport { Minimap } from 'src/view/Minimap';\n\nimport { Wolf } from 'src/entities/actors/Wolf';\n\nimport type { Camera } from 'src/services/Camera';\nimport type { EventEmitter } from 'src/services/EventEmitter/EventEmitter';\n\nimport { INTERSECTION_TYPES, TEXTURE_SIZE, TILE_SIZE, WEAPONS, WOLF_ATTACK_FOV } from 'src/constants/config';\n\nimport { getTextureOffset } from 'src/utils/getTextureOffset';\nimport { clamp, getIsVertexInTheTriangle, getRangeOfView } from 'src/utils/maths';\n\nimport { GameMap } from './GameMap';\n\nimport type { Chunk, Obstacle, RawMap, ScreenData } from 'src/types';\nimport { isDoor, isEnemy, isSprite, isWall } from 'src/types/typeGuards';\n\nexport type SceneParams = {\n  canvas: Scene['_canvas'];\n  map: RawMap;\n  screenData: Scene['_screenData'];\n  emitter: Scene['_emitter'];\n  fov: Camera['_fov'];\n  resolutionScale: Camera['_resolutionScale'];\n};\n\nexport class Scene {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _gameMap: GameMap;\n  private readonly _hud: Hud;\n  private readonly _minimap: Minimap;\n  private readonly _wolf: Wolf;\n  private readonly _emitter: EventEmitter;\n\n  private _screenData: ScreenData;\n\n  constructor(params: SceneParams) {\n    this._canvas = params.canvas;\n    this._ctx = params.canvas.getContext('2d')!;\n\n    this._screenData = params.screenData;\n\n    this._emitter = params.emitter;\n\n    this._gameMap = new GameMap(this._emitter, params.map);\n\n    this._hud = new Hud({\n      ctx: this._ctx,\n      emitter: this._emitter,\n      screenData: this._screenData,\n      initialWeapon: 'PISTOL',\n    });\n\n    this._wolf = new Wolf({\n      ammo: 20,\n      emitter: this._emitter,\n      currentWeapon: 'PISTOL',\n      health: 100,\n      level: 0,\n      lives: 3,\n      maxHealth: 100,\n      position: this._gameMap.startPosition,\n      score: 0,\n      screenData: this._screenData,\n      weapons: ['KNIFE', 'PISTOL', 'MACHINE_GUN'],\n      rawValue: 'START_POS',\n      resolutionScale: params.resolutionScale,\n      fov: params.fov,\n      gameMap: this._gameMap,\n    });\n\n    this._minimap = new Minimap({\n      ctx: this._ctx,\n      obstacles: this._gameMap.obstacles,\n      rowsLength: this._gameMap.map.length,\n    });\n\n    this.resize(this._screenData);\n    this.registerEvents();\n  }\n\n  private registerEvents() {\n    this._emitter.on('wolfAttack', this.handleWolfAttack.bind(this));\n    this._emitter.on('wolfInteract', this.handleWolfInteract.bind(this));\n    this._emitter.on('resize', this.resize.bind(this));\n  }\n\n  private resize({ width, height }: ScreenData) {\n    this._canvas.width = width;\n    this._canvas.height = height;\n\n    this._screenData.height = height;\n    this._screenData.width = width;\n  }\n\n  getNonGridObstaclesInView(): Obstacle[] {\n    const { nonGridObstacles } = this._gameMap;\n    const { position, angle } = this._wolf;\n    const { fov } = this._wolf.camera;\n\n    const rangeOfView = getRangeOfView(angle, fov, position);\n\n    // For optimization, we must reduce the number of vectors with which intersections are searched\n    // push only those planes that can be visible by player side\n    const obstacles = nonGridObstacles.reduce<Obstacle[]>((acc, obstacle) => {\n      if (isEnemy(obstacle)) {\n        acc.push(obstacle.getPreparedSprite(this._wolf.position, this._wolf.angle));\n\n        return acc;\n      }\n\n      if (!isWall(obstacle)) {\n        acc.push(obstacle);\n\n        return acc;\n      }\n\n      const obstaclePos = obstacle.position;\n\n      // get visible sides of the wall by player position\n      if (position.x <= obstaclePos.x1) {\n        acc.push(obstacle.wallSides.LEFT);\n      }\n      if (position.x >= obstaclePos.x2) {\n        acc.push(obstacle.wallSides.RIGHT);\n      }\n      if (position.y <= obstaclePos.y1) {\n        acc.push(obstacle.wallSides.TOP);\n      }\n      if (position.y >= obstaclePos.y2) {\n        acc.push(obstacle.wallSides.BOTTOM);\n      }\n\n      return acc;\n    }, []);\n\n    // get walls that are in the FOV range\n    return obstacles.filter((obstacle) => {\n      // If user comes straight to the plane, vertexes of the plane will not be in range of vision\n      // so we need to check if user looking at the plane rn\n      const isLookingAt = !!this._wolf.camera.getViewAngleIntersection(obstacle.position);\n\n      const { x1, y1, x2, y2 } = obstacle.position;\n\n      return (\n        isLookingAt ||\n        getIsVertexInTheTriangle({ x: x1, y: y1 }, rangeOfView) ||\n        getIsVertexInTheTriangle({ x: x2, y: y2 }, rangeOfView)\n      );\n    });\n  }\n\n  handleWolfAttack() {\n    const attackRange = getRangeOfView(this._wolf.angle, WOLF_ATTACK_FOV, this._wolf.position);\n\n    const enemiesInAttackRange = this._gameMap.enemies.filter((enemy) => {\n      if (enemy.currentAction === 'DIE') {\n        return false;\n      }\n\n      const enemyPositionVector = enemy.getPreparedSprite(this._wolf.position, this._wolf.angle).position;\n      const isLookingAt = !!this._wolf.camera.getViewAngleIntersection(enemyPositionVector);\n\n      if (!getIsVertexInTheTriangle(enemy.position, attackRange) && !isLookingAt) {\n        return false;\n      }\n\n      const castResult = enemy.castToPosition(this._wolf.position);\n\n      if (castResult.distance > WEAPONS[this._wolf.currentWeapon].maxDistance) {\n        return false;\n      }\n\n      return enemy.castToPosition(this._wolf.position).isVisible;\n    });\n\n    const closestEnemy = enemiesInAttackRange.sort((enemy, nextEnemy) => {\n      const castResult = enemy.castToPosition(this._wolf.position);\n      const nextCastResult = nextEnemy.castToPosition(this._wolf.position);\n\n      return castResult.distance - nextCastResult.distance;\n    })[0];\n\n    if (closestEnemy) {\n      const weapon = WEAPONS[this._wolf.currentWeapon];\n\n      const { distance } = closestEnemy.castToPosition(this._wolf.position);\n      const damageMultiplier = (weapon.maxDistance - distance) / weapon.maxDistance;\n      const damage = clamp(weapon.maxDamage * damageMultiplier, weapon.minDamage, weapon.maxDamage);\n\n      closestEnemy.hit(damage);\n    }\n  }\n\n  handleWolfInteract() {\n    let obstacleInViewIndex: number | null = null;\n    let obstacleInView: Obstacle | null = null;\n\n    for (let i = 0; i < this._gameMap.obstacles.length; i++) {\n      const obstacle = this._gameMap.obstacles[i];\n\n      if ((!isDoor(obstacle) && !isWall(obstacle)) || !obstacle.isMovable) {\n        continue;\n      }\n\n      const intersection = this._wolf.camera.getViewAngleIntersection(obstacle.position);\n\n      const distance = Math.sqrt(\n        (this._wolf.position.x - obstacle.position.x1) ** 2 + (this._wolf.position.y - obstacle.position.y1) ** 2\n      );\n\n      // obstacle is close to player\n      if (intersection && distance <= TILE_SIZE * 2) {\n        obstacleInViewIndex = i;\n        obstacleInView = obstacle;\n      }\n    }\n\n    if (obstacleInViewIndex === null || !obstacleInView) {\n      return;\n    }\n\n    this._gameMap.interactWithObstacle(obstacleInView);\n  }\n\n  render() {\n    this._ctx.imageSmoothingEnabled = false;\n\n    this._ctx.beginPath();\n    this._ctx.clearRect(0, 0, this._screenData.width, this._screenData.height);\n    this._ctx.closePath();\n\n    // ceiling\n    this._ctx.fillStyle = '#383838';\n    this._ctx.fillRect(0, 0, this._screenData.width, Math.ceil(this._screenData.height / 2));\n\n    const intersections = this._wolf.camera.getIntersections(this._gameMap.map, this.getNonGridObstaclesInView());\n\n    // sort intersections by closest\n    const sortedAndMergedIntersections = [...intersections].sort((a, b) => {\n      if (b.distance === a.distance) {\n        return b.distance * (b.layer * 100000) - a.distance * (a.layer * 100000);\n      }\n\n      return b.distance - a.distance;\n    });\n\n    const chunk: Chunk = {\n      startTextureOffsetX: 0,\n      startIndex: 0,\n      width: 0,\n      isInitial: true,\n      rays: [],\n    };\n\n    for (let i = 0; i < sortedAndMergedIntersections.length; i++) {\n      const intersection = sortedAndMergedIntersections[i];\n      const { obstacle } = intersection;\n      const { index } = intersection;\n      const isSpriteObstacle = isSprite(obstacle);\n\n      const nextIntersection = sortedAndMergedIntersections[i + 1];\n\n      const textureOffsetX = getTextureOffset(intersection);\n      const nextTextureOffset = nextIntersection && getTextureOffset(nextIntersection);\n\n      if (chunk.isInitial) {\n        chunk.rays.push(intersection);\n        chunk.width = 1;\n        chunk.startIndex = intersection.index;\n        chunk.startTextureOffsetX = textureOffsetX;\n        chunk.isInitial = false;\n      }\n\n      const sameLayer = nextIntersection?.layer === intersection.layer;\n      const sameObstacle = nextIntersection?.obstacle === intersection.obstacle;\n      const sameOrNextIndex = nextIntersection?.index === index || nextIntersection?.index === index + 1;\n      const sameDistance = isSpriteObstacle || nextIntersection?.distance === intersection.distance;\n      const sameTextureId = nextIntersection?.obstacle.texture === obstacle.texture;\n      const sameTextureOffset = isSpriteObstacle || nextTextureOffset === textureOffsetX;\n\n      // if true: add image to chunk and continue, if false: draw chunked images in 1 iteration\n      if (\n        (isSpriteObstacle && sameObstacle && sameLayer) ||\n        (!isSpriteObstacle && sameOrNextIndex && sameDistance && sameTextureId && sameTextureOffset)\n      ) {\n        chunk.rays.push(nextIntersection);\n        chunk.width += 1;\n      } else {\n        const isHorizontalIntersection =\n          (!isWall(obstacle) && !isDoor(obstacle)) || obstacle.intersectionType === INTERSECTION_TYPES.HORIZONTAL;\n\n        const textureHeight =\n          ((TILE_SIZE / intersection.distance) * (Math.PI / this._wolf.camera.fov) * this._screenData.height) / 1.75;\n\n        const texture =\n          isHorizontalIntersection && (isWall(obstacle) || isDoor(obstacle)) ? obstacle.textureDark : obstacle.texture;\n\n        const totalTextureOffsetX = isSpriteObstacle ? TEXTURE_SIZE - chunk.startTextureOffsetX - 1 : textureOffsetX;\n        const textureOffsetY = 0;\n        const textureWidth = isSpriteObstacle ? Math.abs(chunk.startTextureOffsetX - textureOffsetX) : 1;\n        const textureSize = TEXTURE_SIZE;\n        const textureXPositionOnScreen = chunk.startIndex / this._wolf.camera.resolutionScale;\n        const textureYPositionOnScreen = this._screenData.height / 2 - textureHeight / 2;\n        const textureWidthOnScreen = chunk.width / this._wolf.camera.resolutionScale;\n\n        chunk.rays = [];\n        chunk.width = 0;\n        chunk.startIndex = 0;\n        chunk.isInitial = true;\n\n        this._ctx.drawImage(\n          texture,\n          totalTextureOffsetX,\n          textureOffsetY,\n          textureWidth,\n          textureSize,\n          textureXPositionOnScreen,\n          textureYPositionOnScreen,\n          textureWidthOnScreen,\n          textureHeight\n        );\n      }\n    }\n\n    this._hud.render({\n      currentWeapon: this._wolf.currentWeapon,\n      ammo: this._wolf.ammo,\n      lives: this._wolf.lives,\n      score: this._wolf.score,\n      level: this._wolf.level,\n      health: this._wolf.health,\n    });\n\n    this._minimap.render(this._wolf.position, this._gameMap.enemies);\n  }\n}\n","import { Enemy, EnemyParams } from 'src/entities/actors/abstract/Enemy';\n\nimport { TILE_SIZE } from 'src/constants/config';\n\nimport { getEnemyFrameSetByAction, getEnemyFrameSetByState } from 'src/utils/frameSets';\n\nexport type GuardParams = Omit<\n  EnemyParams,\n  | 'stateFrameSet'\n  | 'actionFrameSet'\n  | 'health'\n  | 'maxHealth'\n  | 'currentWeapon'\n  | 'speed'\n  | 'viewDistance'\n  | 'attackDistance'\n  | 'attackDelayTime'\n  | 'attackFrameIdx'\n  | 'attackBaseDamage'\n>;\n\nexport class Guard extends Enemy {\n  constructor(params: GuardParams) {\n    super({\n      ...params,\n      currentWeapon: 'PISTOL',\n      health: 100,\n      maxHealth: 100,\n      speed: 0.4,\n      viewDistance: TILE_SIZE * 20,\n      attackDistance: TILE_SIZE * 12,\n      attackDelayTime: 1000,\n      attackBaseDamage: 30,\n      attackFrameIdx: 2,\n      stateFrameSet: getEnemyFrameSetByState('guard'),\n      actionFrameSet: getEnemyFrameSetByAction('guard'),\n    });\n  }\n}\n","import { Actor, ActorParams } from 'src/entities/actors/abstract/Actor';\n\nimport { Camera } from 'src/services/Camera';\n\nimport { ACTOR_SPEED, TILE_SIZE, WEAPONS } from 'src/constants/config';\n\nimport type { Obstacle, Vertex, WeaponType } from 'src/types';\nimport { isDoor, isItem, isWall } from 'src/types/typeGuards';\n\nexport type WolfParams = {\n  emitter: Wolf['_emitter'];\n  ammo: Wolf['_ammo'];\n  lives: Wolf['_lives'];\n  level: Wolf['_level'];\n  score: Wolf['_score'];\n  weapons: Wolf['_weapons'];\n  screenData: Camera['_screenData'];\n  resolutionScale: Camera['_resolutionScale'];\n  fov: Camera['_fov'];\n  gameMap: Wolf['_gameMap'];\n} & ActorParams;\n\nexport class Wolf extends Actor {\n  private _camera: Camera;\n  private _ammo: number;\n  private _lives: number;\n  private _level: number;\n  private _score: number;\n  private _weapons: (keyof typeof WEAPONS)[];\n\n  constructor(params: WolfParams) {\n    super(params);\n\n    this._ammo = params.ammo;\n    this._score = params.score;\n    this._lives = params.lives;\n    this._level = params.level;\n    this._weapons = params.weapons;\n    this._emitter = params.emitter;\n\n    this._camera = new Camera({\n      screenData: params.screenData,\n      resolutionScale: params.resolutionScale,\n      fov: params.fov,\n      position: params.position,\n      emitter: params.emitter,\n    });\n\n    this._emitter.emit('wolfPositionChange', this._position);\n    this._emitter.emit('wolfMatrixPositionChange', this.currentMatrixPosition);\n\n    this.handleWolfHit = this.handleWolfHit.bind(this);\n    this.handleMouseEvent = this.handleMouseEvent.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.update = this.update.bind(this);\n\n    this.registerEvents();\n  }\n\n  protected registerEvents() {\n    window.addEventListener('mousedown', this.handleMouseEvent);\n    window.addEventListener('mouseup', this.handleMouseEvent);\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n\n    this._emitter.on('frameUpdate', this.update);\n    this._emitter.on('wolfHit', this.handleWolfHit);\n  }\n\n  protected unregisterEvents() {\n    window.removeEventListener('mousedown', this.handleMouseEvent);\n    window.removeEventListener('mouseup', this.handleMouseEvent);\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('keyup', this.handleKeyUp);\n\n    this._emitter.off('frameUpdate', this.update);\n    this._emitter.off('wolfHit', this.handleWolfHit);\n  }\n\n  get angle() {\n    return this.camera.angle;\n  }\n\n  get ammo() {\n    return this._ammo;\n  }\n\n  get lives() {\n    return this._lives;\n  }\n\n  get score() {\n    return this._score;\n  }\n\n  get health() {\n    return this._health;\n  }\n\n  get level() {\n    return this._level;\n  }\n\n  get currentWeapon() {\n    return this._currentWeapon;\n  }\n\n  get camera() {\n    return this._camera;\n  }\n\n  get canAttack() {\n    return this._attackTimeout.isExpired && (this._ammo > 0 || WEAPONS[this._currentWeapon].ammoPerAttack === 0);\n  }\n\n  private handleWolfHit(damage: number) {\n    this._health -= damage;\n\n    if (this._health <= 0) {\n      this._health = 0;\n\n      this._emitter.emit('wolfDie', undefined);\n\n      this.unregisterEvents();\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent) {\n    // weapons\n    if (event.key === '1') {\n      this.changeWeapon('KNIFE');\n    } else if (event.key === '2') {\n      this.changeWeapon('PISTOL');\n    } else if (event.key === '3') {\n      this.changeWeapon('MACHINE_GUN');\n    }\n\n    if (event.keyCode === 32 /* space */) {\n      event.preventDefault();\n\n      this._emitter.emit('wolfInteract', undefined);\n    }\n    // movement\n    if (event.keyCode === 87 /* w */) {\n      this._verticalSpeed = ACTOR_SPEED;\n    } else if (event.keyCode === 83 /* s */) {\n      this._verticalSpeed = -ACTOR_SPEED;\n    } else if (event.keyCode === 68 /* d */) {\n      this._horizontalSpeed = ACTOR_SPEED;\n    } else if (event.keyCode === 65 /* a */) {\n      this._horizontalSpeed = -ACTOR_SPEED;\n    }\n  }\n\n  private handleMouseEvent(event: MouseEvent) {\n    // lmb down\n    if (event.buttons === 1) {\n      this._isAttacking = true;\n    }\n    // lmb up\n    if (event.buttons === 0) {\n      this._isAttacking = false;\n    }\n  }\n\n  private handleKeyUp(event: KeyboardEvent) {\n    if (event.keyCode === 87 /* w */ && this._verticalSpeed > 0) {\n      this._verticalSpeed = 0;\n    } else if (event.keyCode === 83 /* s */ && this._verticalSpeed < 0) {\n      this._verticalSpeed = 0;\n    } else if (event.keyCode === 68 /* d */ && this._horizontalSpeed > 0) {\n      this._horizontalSpeed = 0;\n    } else if (event.keyCode === 65 /* a */ && this._horizontalSpeed < 0) {\n      this._horizontalSpeed = 0;\n    }\n  }\n\n  private changeWeapon(weaponType: WeaponType) {\n    if (this._weapons.includes(weaponType)) {\n      this._currentWeapon = weaponType;\n\n      this._emitter.emit('wolfWeaponChange', this._currentWeapon);\n\n      // weapon change timeout to prevent spamming 1-2-1-2-1-2 for fast attack\n      this._attackTimeout.set(100);\n      this._attackTimeout.onTimeoutExpire = null;\n    }\n  }\n\n  private attack() {\n    if (this.canAttack) {\n      const weapon = WEAPONS[this._currentWeapon];\n\n      this._attackTimeout.set(weapon.frameDuration * weapon.attackFrameIdx);\n\n      // sync with animation\n      this._attackTimeout.onTimeoutExpire = () => {\n        this._ammo -= WEAPONS[this._currentWeapon].ammoPerAttack;\n\n        // rest attack logic\n\n        // wait rest animation\n        this._attackTimeout.set(weapon.frameDuration * (weapon.frameSet.length - weapon.attackFrameIdx));\n        this._attackTimeout.onTimeoutExpire = null;\n      };\n\n      this._emitter.emit('wolfAttack', WEAPONS[this._currentWeapon]);\n    }\n  }\n\n  private handleCollisionIfOccurs(updatedPosition: Vertex, obstacle: Obstacle | null) {\n    if (!obstacle || (!obstacle.hasCollision && !isItem(obstacle))) {\n      return;\n    }\n\n    let doesCollide = false;\n\n    const matrixCoordinates =\n      isWall(obstacle) && obstacle.isInFinalPosition\n        ? obstacle.endPositionMatrixCoordinates\n        : obstacle.matrixCoordinates;\n\n    const preparedObstaclePosition = {\n      x1: matrixCoordinates.x * TILE_SIZE,\n      y1: matrixCoordinates.y * TILE_SIZE,\n      x2: matrixCoordinates.x * TILE_SIZE + TILE_SIZE,\n      y2: matrixCoordinates.y * TILE_SIZE + TILE_SIZE,\n    };\n\n    if (isDoor(obstacle)) {\n      if (obstacle.intersectionType === 'VERTICAL') {\n        preparedObstaclePosition.x1 -= TILE_SIZE / 2;\n        preparedObstaclePosition.x2 += TILE_SIZE / 2;\n      }\n      if (obstacle.intersectionType === 'HORIZONTAL') {\n        preparedObstaclePosition.y1 -= TILE_SIZE / 2;\n        preparedObstaclePosition.y2 += TILE_SIZE / 2;\n      }\n    }\n\n    // make obstacle hitbox bigger, to avoid player oncoming to texture TOO close\n    const expandedObstacleVector = {\n      x1: preparedObstaclePosition.x1 - TILE_SIZE * 0.3,\n      y1: preparedObstaclePosition.y1 - TILE_SIZE * 0.3,\n      x2: preparedObstaclePosition.x2 + TILE_SIZE * 0.3,\n      y2: preparedObstaclePosition.y2 + TILE_SIZE * 0.3,\n    };\n\n    // if player new position is inside of hitbox\n    if (\n      updatedPosition.x >= expandedObstacleVector.x1 &&\n      updatedPosition.x <= expandedObstacleVector.x2 &&\n      updatedPosition.y >= expandedObstacleVector.y1 &&\n      updatedPosition.y <= expandedObstacleVector.y2\n    ) {\n      // push player outside of hitbox\n      if (obstacle.hasCollision) {\n        if (this._position.x >= expandedObstacleVector.x1 && this._position.x <= expandedObstacleVector.x2) {\n          updatedPosition.y = this._position.y;\n        }\n        if (this._position.y >= expandedObstacleVector.y1 && this._position.y <= expandedObstacleVector.y2) {\n          updatedPosition.x = this._position.x;\n        }\n      }\n\n      doesCollide = true;\n    }\n\n    if (doesCollide && isItem(obstacle)) {\n      const { purpose } = obstacle;\n\n      // eslint-disable-next-line default-case\n      switch (purpose.affects) {\n        case 'ammo': {\n          if (this._ammo === 100) {\n            return;\n          }\n\n          this._ammo += purpose.value;\n\n          if (this._ammo > 100) {\n            this._ammo = 100;\n          }\n\n          break;\n        }\n        case 'health': {\n          if (this._health === this._maxHealth) {\n            return;\n          }\n\n          this._health += purpose.value;\n\n          if (this._health > this._maxHealth) {\n            this._health = this._maxHealth;\n          }\n\n          break;\n        }\n        case 'lives': {\n          this._lives += purpose.value;\n\n          break;\n        }\n        case 'score': {\n          this._score += purpose.value;\n\n          break;\n        }\n        case 'weapons': {\n          this._weapons.push(purpose.value);\n\n          break;\n        }\n      }\n\n      this._emitter.emit('wolfBoostPickup', undefined);\n\n      // remove from map when item picked up\n      this._gameMap!.map[obstacle.matrixCoordinates.y][obstacle.matrixCoordinates.x] = null;\n    }\n  }\n\n  private move() {\n    if (this._horizontalSpeed === 0 && this._verticalSpeed === 0) {\n      return;\n    }\n\n    if (!this._gameMap) {\n      return;\n    }\n\n    const position: Vertex = { x: this._position.x, y: this._position.y };\n\n    const verticalChangeX = Math.sin(this._camera.angle) * this._verticalSpeed * TIME_SCALE;\n    const verticalChangeY = Math.cos(this._camera.angle) * this._verticalSpeed * TIME_SCALE;\n\n    const horizontalChangeX = Math.sin(this._camera.angle + Math.PI / 2) * this._horizontalSpeed * TIME_SCALE;\n    const horizontalChangeY = Math.cos(this._camera.angle + Math.PI / 2) * this._horizontalSpeed * TIME_SCALE;\n\n    const xSum = verticalChangeX + horizontalChangeX;\n    const ySum = verticalChangeY + horizontalChangeY;\n\n    // avoid vector addition\n    position.x += xSum >= 0 ? Math.min(xSum, ACTOR_SPEED * TIME_SCALE) : Math.max(xSum, -ACTOR_SPEED * TIME_SCALE);\n    position.y += ySum >= 0 ? Math.min(ySum, ACTOR_SPEED * TIME_SCALE) : Math.max(ySum, -ACTOR_SPEED * TIME_SCALE);\n\n    const positionOnMap = this.currentMatrixPosition;\n\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y - 1] || [])[positionOnMap.x - 1]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y - 1] || [])[positionOnMap.x]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y - 1] || [])[positionOnMap.x + 1]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y] || [])[positionOnMap.x - 1]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y] || [])[positionOnMap.x + 1]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y + 1] || [])[positionOnMap.x - 1]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y + 1] || [])[positionOnMap.x]);\n    this.handleCollisionIfOccurs(position, (this._gameMap.map[positionOnMap.y + 1] || [])[positionOnMap.x + 1]);\n\n    this._position = position;\n    this._emitter.emit('wolfPositionChange', this._position);\n    this._emitter.emit('wolfMatrixPositionChange', this.currentMatrixPosition);\n  }\n\n  private update() {\n    this.move();\n\n    if (this._isAttacking) {\n      this.attack();\n    }\n  }\n}\n","import type { GameMap } from 'src/entities/GameMap';\n\nimport type { EventEmitter } from 'src/services/EventEmitter/EventEmitter';\n\nimport { Timeout } from 'src/controllers/Timeout';\n\nimport { TILE_SIZE, WEAPONS } from 'src/constants/config';\n\nimport type { Vertex } from 'src/types';\n\nexport type ActorParams = {\n  position: Actor['_position'];\n  health: Actor['_health'];\n  maxHealth: Actor['_maxHealth'];\n  currentWeapon: Actor['_currentWeapon'];\n  rawValue: Actor['_rawValue'];\n  emitter: Actor['_emitter'];\n  gameMap: Actor['_gameMap'];\n};\n\nexport abstract class Actor {\n  protected _emitter: EventEmitter;\n  protected _health: number;\n  protected _maxHealth: number;\n  protected _horizontalSpeed: number;\n  protected _verticalSpeed: number;\n  protected _currentWeapon: keyof typeof WEAPONS;\n  protected _isAttacking: boolean;\n  protected _position: Vertex;\n  protected _attackTimeout: Timeout;\n  protected _rawValue: string | number;\n  protected _gameMap: GameMap | null;\n\n  protected constructor(params: ActorParams) {\n    this._currentWeapon = params.currentWeapon;\n    this._health = params.health;\n    this._maxHealth = params.maxHealth;\n    this._position = params.position;\n    this._rawValue = params.rawValue;\n    this._gameMap = params.gameMap;\n    this._emitter = params.emitter;\n\n    this._attackTimeout = new Timeout(params.emitter);\n    this._isAttacking = false;\n    this._horizontalSpeed = 0;\n    this._verticalSpeed = 0;\n\n    this.registerActorEvents();\n  }\n\n  private registerActorEvents() {\n    this._emitter.on('gameMapReady', (gameMap) => {\n      this._gameMap = gameMap;\n    });\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  get currentMatrixPosition() {\n    return {\n      x: Math.floor(this._position.x / TILE_SIZE),\n      y: Math.floor(this._position.y / TILE_SIZE),\n    };\n  }\n}\n","import type { GameMap } from 'src/entities/GameMap';\nimport { Actor, ActorParams } from 'src/entities/actors/abstract/Actor';\nimport { SpriteObstacle } from 'src/entities/obstacles/Sprite';\n\nimport { Pathfinder } from 'src/services/Pathfinder';\nimport { Ray } from 'src/services/Ray';\n\nimport { Animation } from 'src/controllers/Animation';\nimport { Timeout } from 'src/controllers/Timeout';\n\nimport { ENEMY_FOV, TILE_SIZE } from 'src/constants/config';\n\nimport {\n  getAngleBetweenVertexes,\n  getDistanceBetweenVertexes,\n  getIsVertexInTheTriangle,\n  getRangeOfView,\n  hasEqualPositionVertex,\n  toRadians,\n  unitVector,\n} from 'src/utils/maths';\n\nimport type {\n  DirectedFrameSets,\n  EnemyAction,\n  EnemyDirectedFrameSet,\n  EnemyDirections,\n  EnemyFrameSetByAction,\n  EnemyState,\n  Frame,\n  Triangle,\n  Vertex,\n  Weapon,\n} from 'src/types';\nimport { isDoor, isWall } from 'src/types/typeGuards';\n\nexport type EnemyParams = {\n  initialState: Enemy['_currentState'];\n  initialAction: Enemy['_currentAction'];\n  speed: Enemy['_speed'];\n  viewDistance: Enemy['_viewDistance'];\n  angle: Enemy['_angle'];\n  attackDistance: Enemy['_attackDistance'];\n  attackDelayTime: Enemy['_attackDelayTime'];\n  attackFrameIdx: Enemy['_attackFrameIdx'];\n  attackBaseDamage: Enemy['_attackBaseDamage'];\n  stateFrameSet: Enemy['_stateFrameSet'];\n  actionFrameSet: Enemy['_actionFrameSet'];\n} & ActorParams;\n\nconst ENEMY_SIDES_AMOUNT = 8;\nconst SIDE = toRadians(360 / ENEMY_SIDES_AMOUNT);\nconst HALF_SIDE = SIDE / 2;\n\nexport abstract class Enemy extends Actor {\n  public readonly isEnemy: true;\n\n  protected readonly _initialMatrixPosition: Vertex;\n  protected readonly _initialAngle: number;\n\n  protected readonly _viewDistance: number;\n  protected readonly _attackDistance: number;\n  protected readonly _attackDelayTime: number;\n  protected readonly _attackFrameIdx: number;\n  protected readonly _attackBaseDamage: number;\n  protected readonly _speed: number;\n\n  protected _stateFrameSet: EnemyDirectedFrameSet;\n  protected _actionFrameSet: EnemyFrameSetByAction;\n  protected _sprite: SpriteObstacle;\n  protected _animationController: Animation<Frame<HTMLImageElement>>;\n  protected _attackTimeout: Timeout;\n  protected _currentSide: EnemyDirections[number];\n\n  protected _pathfinder: null | Pathfinder;\n\n  protected _currentFrameSetName: DirectedFrameSets;\n  protected _currentState: EnemyState;\n  protected _currentAction: EnemyAction | null;\n\n  protected _angle: number;\n\n  protected _targetMatrixPosition: Vertex | null;\n  protected _wolfMatrixPosition: Vertex;\n  protected _wolfPosition: Vertex;\n\n  protected constructor(params: EnemyParams) {\n    super(params);\n\n    this.isEnemy = true;\n\n    this._stateFrameSet = params.stateFrameSet;\n    this._actionFrameSet = params.actionFrameSet;\n\n    this._currentFrameSetName = 'IDLE';\n    this._currentState = params.initialState;\n    this._currentAction = null;\n    this._currentSide = 'FRONT';\n\n    this._attackTimeout = new Timeout(this._emitter);\n\n    const directedFrameSet: DirectedFrameSets =\n      this._horizontalSpeed !== 0 || this._verticalSpeed !== 0 ? 'RUN' : 'IDLE';\n\n    const initialFrameSet = this._currentAction\n      ? this._actionFrameSet[this._currentAction]\n      : this._stateFrameSet[directedFrameSet][this._currentSide];\n\n    this._animationController = new Animation({\n      frameSet: initialFrameSet,\n      isLoopAnimation: true,\n      emitter: this._emitter,\n    });\n\n    this._sprite = new SpriteObstacle({\n      hasCollision: false,\n      position: {\n        x1: this.currentMatrixPosition.x * TILE_SIZE,\n        y1: this.currentMatrixPosition.y * TILE_SIZE,\n        x2: this.currentMatrixPosition.x * TILE_SIZE + TILE_SIZE,\n        y2: this.currentMatrixPosition.y * TILE_SIZE + TILE_SIZE,\n      },\n      rawValue: this._rawValue,\n      texture: this._animationController.currentFrame.data,\n    });\n\n    this._angle = params.angle;\n    this._initialAngle = params.angle;\n    this._initialMatrixPosition = this.currentMatrixPosition;\n\n    this._targetMatrixPosition = null;\n    this._wolfPosition = { x: 0, y: 0 };\n    this._wolfMatrixPosition = { x: 0, y: 0 };\n\n    this._viewDistance = params.viewDistance;\n    this._attackDistance = params.attackDistance;\n    this._attackDelayTime = params.attackDelayTime;\n    this._attackFrameIdx = params.attackFrameIdx;\n    this._attackBaseDamage = params.attackBaseDamage;\n    this._speed = params.speed;\n\n    if (params.initialAction === 'DIE') {\n      this._animationController.setActiveFrameIdx(initialFrameSet.length - 1);\n    }\n\n    this.handleGameMapReady = this.handleGameMapReady.bind(this);\n    this.handleWolfPositionChange = this.handleWolfPositionChange.bind(this);\n    this.checkNoise = this.checkNoise.bind(this);\n    this.update = this.update.bind(this);\n\n    this._pathfinder = null;\n\n    this.registerEvents();\n  }\n\n  get angle() {\n    return this._angle;\n  }\n\n  get currentState() {\n    return this._currentState;\n  }\n\n  get currentAction() {\n    return this._currentAction;\n  }\n\n  private updateActiveFrameSet() {\n    const directedFrameSet: DirectedFrameSets =\n      this._horizontalSpeed !== 0 || this._verticalSpeed !== 0 ? 'RUN' : 'IDLE';\n\n    const frameSet = this._currentAction\n      ? this._actionFrameSet[this._currentAction]\n      : this._stateFrameSet[directedFrameSet][this._currentSide];\n\n    this._animationController.updateFrameSet(frameSet);\n  }\n\n  protected onCurrentFrameSetNameChange(): void {\n    this.updateActiveFrameSet();\n  }\n\n  protected onCurrentStateChange() {\n    this.updateActiveFrameSet();\n  }\n\n  protected onCurrentActionChange() {\n    this.updateActiveFrameSet();\n\n    this._animationController.onAnimationEnd = () => {};\n\n    if (this._currentAction === 'TAKE_DAMAGE') {\n      this._animationController.onAnimationEnd = () => {\n        this.setCurrentAction(null);\n      };\n    }\n\n    if (this._currentAction === 'SHOOT') {\n      this._animationController.onAnimationEnd = () => {\n        this._attackTimeout.set(this._attackDelayTime);\n        this.setCurrentAction(null);\n      };\n\n      this._animationController.onFrameChange = (index) => {\n        if (index === this._attackFrameIdx && this._currentAction === 'SHOOT' && this.checkForWolfInView()) {\n          const distanceToWolf =\n            getDistanceBetweenVertexes(this.currentMatrixPosition, this._wolfMatrixPosition) * TILE_SIZE;\n\n          const damageRatio = Math.max((this._attackDistance - distanceToWolf) / this._attackDistance, 0.2);\n\n          this._emitter.emit('wolfHit', Math.round(damageRatio * this._attackBaseDamage));\n        }\n      };\n    }\n  }\n\n  private registerEvents() {\n    this._emitter.on('gameMapReady', this.handleGameMapReady);\n    this._emitter.on('wolfPositionChange', this.handleWolfPositionChange);\n    this._emitter.on('wolfAttack', this.checkNoise);\n    this._emitter.on('frameUpdate', this.update);\n  }\n\n  private unregisterEvents() {\n    this._emitter.off('gameMapReady', this.handleGameMapReady);\n    this._emitter.off('wolfPositionChange', this.handleWolfPositionChange);\n    this._emitter.off('wolfAttack', this.checkNoise);\n    this._emitter.off('frameUpdate', this.update);\n  }\n\n  private handleGameMapReady(gameMap: GameMap) {\n    this._gameMap = gameMap;\n\n    this._pathfinder = new Pathfinder(this._gameMap.navigationMap);\n  }\n\n  private die() {\n    this.unregisterEvents();\n    this.setCurrentAction('DIE');\n\n    this._emitter.emit('enemyDie', this);\n  }\n\n  hit(damage: number) {\n    this._health -= damage;\n\n    this.setCurrentState('CHASE');\n\n    if (this._health <= 0) {\n      this.die();\n    } else {\n      this.setCurrentAction('TAKE_DAMAGE');\n    }\n  }\n\n  checkNoise(weapon: Weapon) {\n    if (this._currentState !== 'IDLE') {\n      return;\n    }\n\n    const distance = getDistanceBetweenVertexes(this.currentMatrixPosition, this._wolfMatrixPosition) * TILE_SIZE;\n\n    if (distance > weapon.noiseDistance) {\n      return;\n    }\n\n    // find if origin of sound can be reached, counting doors as walls if they are not opened\n    const hasClearPath = this._pathfinder?.findPath(this.currentMatrixPosition, this._wolfMatrixPosition, false);\n\n    if (hasClearPath) {\n      this._targetMatrixPosition = this._wolfMatrixPosition;\n\n      this.setCurrentState('SEARCH');\n    }\n  }\n\n  castToPosition(position: Vertex) {\n    const distanceToWolf = getDistanceBetweenVertexes(this._position, position);\n\n    let angleBetweenEnemyAndWolf = getAngleBetweenVertexes(this._position, position);\n\n    if (angleBetweenEnemyAndWolf <= 0) {\n      angleBetweenEnemyAndWolf = Math.PI * 2 + angleBetweenEnemyAndWolf;\n    }\n\n    const ray = new Ray({\n      initialPosition: this._position,\n      angle: angleBetweenEnemyAndWolf,\n    });\n\n    const castResult = ray\n      .castDDA(this._gameMap!.map, angleBetweenEnemyAndWolf)\n      .filter(\n        (intersection) =>\n          isWall(intersection.obstacle) || (isDoor(intersection.obstacle) && intersection.obstacle.isInStartPosition)\n      );\n\n    const closest = castResult.sort(({ distance: distanceA }, { distance: distanceB }) => distanceA - distanceB)[0];\n\n    return {\n      isVisible: !closest || closest.distance > distanceToWolf,\n      distance: distanceToWolf,\n      angle: angleBetweenEnemyAndWolf,\n    };\n  }\n\n  protected setCurrentAction(newAction: Enemy['_currentAction']) {\n    if (newAction === this._currentAction) {\n      return;\n    }\n\n    this._currentAction = newAction;\n\n    this.onCurrentActionChange();\n  }\n\n  protected setCurrentFrameSetName(newFrameSetName: DirectedFrameSets) {\n    if (newFrameSetName === this._currentFrameSetName) {\n      return;\n    }\n\n    this._currentFrameSetName = newFrameSetName;\n\n    this.onCurrentFrameSetNameChange();\n  }\n\n  protected setCurrentState(newState: Enemy['_currentState']) {\n    if (newState === this._currentState) {\n      return;\n    }\n\n    this._currentState = newState;\n\n    this.onCurrentStateChange();\n  }\n\n  private handleWolfPositionChange(wolfPosition: Vertex) {\n    this._wolfMatrixPosition = {\n      x: Math.floor(wolfPosition.x / TILE_SIZE),\n      y: Math.floor(wolfPosition.y / TILE_SIZE),\n    };\n\n    this._wolfPosition = { ...wolfPosition };\n\n    if (this.checkForWolfInView()) {\n      this.setCurrentState('CHASE');\n    }\n  }\n\n  private checkForWolfInView() {\n    if (!this._gameMap) {\n      return false;\n    }\n\n    const castResult = this.castToPosition(this._wolfPosition)!;\n    const rangeOfView: Triangle = getRangeOfView(this._angle, ENEMY_FOV, this._position);\n\n    if (!getIsVertexInTheTriangle(this._wolfPosition, rangeOfView)) {\n      return false;\n    }\n\n    if (castResult.distance > this._viewDistance) {\n      return false;\n    }\n\n    return castResult.isVisible;\n  }\n\n  move(target: Vertex) {\n    if (!this._pathfinder) {\n      return null;\n    }\n\n    const distanceToWolf = getDistanceBetweenVertexes(this.currentMatrixPosition, this._wolfMatrixPosition) * TILE_SIZE;\n    const nextNavigationNode = this._pathfinder.findPath(this.currentMatrixPosition, target, true);\n    const originalObstacle = nextNavigationNode?.originalObstacle;\n    const hasCollision = !!originalObstacle?.hasCollision;\n\n    // set speed and angle if no obstacle in path\n    if (nextNavigationNode && !hasCollision) {\n      this._verticalSpeed = (this.position.y / TILE_SIZE - nextNavigationNode.y - 0.5) * this._speed * TIME_SCALE;\n      this._horizontalSpeed = (this.position.x / TILE_SIZE - nextNavigationNode.x - 0.5) * this._speed * TIME_SCALE;\n\n      const movingDirection = unitVector({\n        x: this._horizontalSpeed,\n        y: this._verticalSpeed,\n      });\n\n      this._angle = Math.atan2(movingDirection.x, movingDirection.y) + Math.PI;\n    }\n\n    // open door\n    if (hasCollision && originalObstacle && isDoor(originalObstacle)) {\n      this._gameMap?.interactWithObstacle(originalObstacle);\n    }\n\n    const tooClose = distanceToWolf <= TILE_SIZE && this._currentState === 'CHASE';\n\n    // stop if has obstacle with collision in path (usually waiting for door to open)\n    if (!nextNavigationNode || hasCollision || tooClose) {\n      this._verticalSpeed = 0;\n      this._horizontalSpeed = 0;\n    }\n\n    if (this._horizontalSpeed !== 0 || this._verticalSpeed !== 0) {\n      this.setCurrentFrameSetName('RUN');\n    } else {\n      this.setCurrentFrameSetName('IDLE');\n    }\n\n    this._position.x -= this._horizontalSpeed;\n    this._position.y -= this._verticalSpeed;\n\n    return nextNavigationNode;\n  }\n\n  getPreparedSprite(wolfPosition: Vertex, wolfAngle: number) {\n    if (!this._currentAction) {\n      let angleBetweenEnemyAndWolf = getAngleBetweenVertexes(this._position, wolfPosition) - this._angle;\n      let newSide = this._currentSide;\n\n      if (angleBetweenEnemyAndWolf <= 0) {\n        angleBetweenEnemyAndWolf = Math.PI * 2 + angleBetweenEnemyAndWolf;\n      }\n\n      if (angleBetweenEnemyAndWolf <= HALF_SIDE || angleBetweenEnemyAndWolf > HALF_SIDE + SIDE * 7) {\n        newSide = 'FRONT';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE) {\n        newSide = 'FRONT_LEFT';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE * 2) {\n        newSide = 'LEFT';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE * 3) {\n        newSide = 'BACK_RIGHT';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE * 4) {\n        newSide = 'BACK';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE * 5) {\n        newSide = 'BACK_LEFT';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE * 6) {\n        newSide = 'RIGHT';\n      } else if (angleBetweenEnemyAndWolf < HALF_SIDE + SIDE * 7) {\n        newSide = 'FRONT_RIGHT';\n      }\n\n      if (newSide !== this._currentSide) {\n        this._currentSide = newSide;\n\n        let { currentFrameIdx } = this._animationController;\n\n        const directedFrameSet: DirectedFrameSets =\n          this._horizontalSpeed !== 0 || this._verticalSpeed !== 0 ? 'RUN' : 'IDLE';\n\n        const frameSet = this._stateFrameSet[directedFrameSet][this._currentSide];\n\n        if (currentFrameIdx >= frameSet.length) {\n          currentFrameIdx = 0;\n        }\n\n        this._animationController.updateFrameSet(frameSet);\n        this._animationController.setActiveFrameIdx(currentFrameIdx);\n      }\n    }\n\n    this._sprite.texture = this._animationController.currentFrame.data;\n    this._sprite.position = {\n      x1: this._position.x - TILE_SIZE / 2,\n      y1: this._position.y - TILE_SIZE / 2,\n      x2: this._position.x + TILE_SIZE / 2,\n      y2: this._position.y + TILE_SIZE / 2,\n    };\n    this._sprite.rotatePerpendicularlyToView(wolfAngle);\n\n    return this._sprite;\n  }\n\n  protected update() {\n    if (this._currentAction) {\n      return;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this._currentState) {\n      case 'CHASE': {\n        const distanceToWolf =\n          getDistanceBetweenVertexes(this.currentMatrixPosition, this._wolfMatrixPosition) * TILE_SIZE;\n\n        if (distanceToWolf < this._attackDistance && this._attackTimeout.isExpired) {\n          const isWolfInView = this.checkForWolfInView();\n\n          if (isWolfInView) {\n            this.setCurrentAction('SHOOT');\n          }\n        }\n        // if wolf is too far away, change status to alert and check last wolf position in view\n        if (distanceToWolf > this._viewDistance) {\n          this._targetMatrixPosition = { ...this._wolfMatrixPosition };\n\n          this.setCurrentState('SEARCH');\n        }\n\n        this.move(this._wolfMatrixPosition);\n\n        break;\n      }\n\n      case 'SEARCH': {\n        const nextNavigationNode = this.move(this._targetMatrixPosition!);\n\n        // if returned to initial position, set state to idle and angle to initial\n        if (\n          !nextNavigationNode &&\n          this._targetMatrixPosition &&\n          hasEqualPositionVertex(this._targetMatrixPosition, this._initialMatrixPosition)\n        ) {\n          this.setCurrentState('IDLE');\n\n          this._angle = this._initialAngle;\n        } else if (!nextNavigationNode) {\n          this._targetMatrixPosition = this._initialMatrixPosition;\n        }\n\n        const isWolfInView = this.checkForWolfInView();\n\n        if (isWolfInView) {\n          this.setCurrentState('CHASE');\n        }\n\n        break;\n      }\n    }\n  }\n}\n","import type { Timeout } from 'src/controllers/Timeout';\n\nimport { INTERSECTION_TYPES } from 'src/constants/config';\n\nimport { DynamicObstacle, DynamicObstacleParams } from './abstract/DynamicObstacle';\n\nexport type DoorParams = DynamicObstacleParams & {\n  textureDark: DoorObstacle['_textureDark'];\n  closeTimeout: DoorObstacle['closeTimeout'];\n  isVertical: DoorObstacle['isVertical'];\n};\n\nexport class DoorObstacle extends DynamicObstacle {\n  public _textureDark: HTMLImageElement;\n\n  public readonly isVertical: boolean;\n  public readonly isDoor: true;\n  public readonly shouldReverseTexture: boolean;\n  public readonly intersectionType: keyof typeof INTERSECTION_TYPES;\n\n  public closeTimeout: null | Timeout;\n\n  constructor(params: DoorParams) {\n    super(params);\n\n    this._textureDark = params.textureDark;\n\n    this.isVertical = params.isVertical;\n    this.isDoor = true;\n    this.closeTimeout = params.closeTimeout;\n    this.shouldReverseTexture = !params.isVertical;\n    this.intersectionType = params.isVertical ? INTERSECTION_TYPES.VERTICAL : INTERSECTION_TYPES.HORIZONTAL;\n  }\n\n  get textureDark() {\n    return this._textureDark;\n  }\n}\n","import { SpriteObstacle } from './Sprite';\nimport type { StaticObstacleParams } from './abstract/StaticObstacle';\n\nimport type { ItemPurpose } from 'src/types';\n\nexport type ItemParams = StaticObstacleParams & {\n  purpose: ItemObstacle['purpose'];\n};\n\nexport class ItemObstacle extends SpriteObstacle {\n  public readonly isItem: true;\n  public readonly purpose: ItemPurpose;\n\n  constructor(params: ItemParams) {\n    super(params);\n\n    this.isItem = true;\n    this.purpose = params.purpose;\n  }\n}\n","import { HALF_TILE_SIZE } from 'src/constants/config';\n\nimport { StaticObstacle, StaticObstacleParams } from './abstract/StaticObstacle';\n\nexport class SpriteObstacle extends StaticObstacle {\n  public readonly isSprite: true;\n\n  constructor(params: StaticObstacleParams) {\n    super(params);\n\n    this.isSprite = true;\n  }\n\n  // sprite should be always perpendicular to player view angle\n  rotatePerpendicularlyToView(angle: number): SpriteObstacle {\n    const middleVertex = {\n      x: (this._position.x2 + this._position.x1) / 2,\n      y: (this._position.y2 + this._position.y1) / 2,\n    };\n\n    const spriteAngle = -angle;\n    const cos = Math.cos(spriteAngle);\n    const sin = Math.sin(spriteAngle);\n\n    this.position = {\n      x1: middleVertex.x + HALF_TILE_SIZE * cos,\n      y1: middleVertex.y + HALF_TILE_SIZE * sin,\n      x2: middleVertex.x - HALF_TILE_SIZE * cos,\n      y2: middleVertex.y - HALF_TILE_SIZE * sin,\n    };\n\n    return this;\n  }\n}\n","import {\n  DOOR_SIDE_WALL_TEXTURE_DARK_ID,\n  DOOR_SIDE_WALL_TEXTURE_ID,\n  INTERSECTION_TYPES,\n  OBSTACLE_SIDES,\n  TILE_SIZE,\n} from 'src/constants/config';\n\nimport { getImageWithSource } from 'src/utils/getImageWithSource';\n\nimport { DynamicObstacle, DynamicObstacleParams } from './abstract/DynamicObstacle';\n\nexport type WallParams = DynamicObstacleParams & {\n  textureDark: WallObstacle['textureDark'];\n  neighborIsDoorMap: Record<keyof typeof OBSTACLE_SIDES, boolean>;\n};\n\nexport class WallObstacle extends DynamicObstacle {\n  private _textureDark: HTMLImageElement;\n  private _neighborIsDoorMap: Record<keyof typeof OBSTACLE_SIDES, boolean>;\n  private _wallSides: Record<keyof typeof OBSTACLE_SIDES, WallObstacle>;\n\n  public readonly isWall: true;\n  public readonly intersectionType: keyof typeof INTERSECTION_TYPES;\n  public readonly shouldReverseTexture: boolean;\n\n  constructor(params: WallParams) {\n    super(params);\n\n    this.intersectionType = INTERSECTION_TYPES.HORIZONTAL;\n    this.shouldReverseTexture = false;\n    this.isWall = true;\n\n    this._textureDark = params.textureDark;\n    this._neighborIsDoorMap = params.neighborIsDoorMap;\n    this._wallSides = {\n      TOP: this.getWallSide(OBSTACLE_SIDES.TOP, this._neighborIsDoorMap.TOP),\n      RIGHT: this.getWallSide(OBSTACLE_SIDES.RIGHT, this._neighborIsDoorMap.RIGHT),\n      BOTTOM: this.getWallSide(OBSTACLE_SIDES.BOTTOM, this._neighborIsDoorMap.BOTTOM),\n      LEFT: this.getWallSide(OBSTACLE_SIDES.LEFT, this._neighborIsDoorMap.LEFT),\n    };\n  }\n\n  get wallSides() {\n    return this._wallSides;\n  }\n\n  set textureDark(newTextureDark: HTMLImageElement) {\n    this._textureDark = newTextureDark;\n  }\n\n  get textureDark() {\n    return this._textureDark;\n  }\n\n  move() {\n    const result = super.move();\n\n    this._wallSides = {\n      TOP: this.getWallSide(OBSTACLE_SIDES.TOP, this._neighborIsDoorMap.TOP),\n      RIGHT: this.getWallSide(OBSTACLE_SIDES.RIGHT, this._neighborIsDoorMap.RIGHT),\n      BOTTOM: this.getWallSide(OBSTACLE_SIDES.BOTTOM, this._neighborIsDoorMap.BOTTOM),\n      LEFT: this.getWallSide(OBSTACLE_SIDES.LEFT, this._neighborIsDoorMap.LEFT),\n    };\n\n    return result;\n  }\n\n  getWallSide(side: keyof typeof OBSTACLE_SIDES, neighborIsDoor: boolean): WallObstacle {\n    const isVertical = side === OBSTACLE_SIDES.TOP || side === OBSTACLE_SIDES.BOTTOM;\n\n    const position = {\n      x1: this.position.x1 + (side === OBSTACLE_SIDES.RIGHT ? TILE_SIZE : 0),\n      y1: this.position.y1 + (side === OBSTACLE_SIDES.BOTTOM ? TILE_SIZE : 0),\n      x2: this.position.x2 - (side === OBSTACLE_SIDES.LEFT ? TILE_SIZE : 0),\n      y2: this.position.y2 - (side === OBSTACLE_SIDES.TOP ? TILE_SIZE : 0),\n    };\n\n    let texture = this._texture;\n    let textureDark = this._textureDark;\n\n    if (neighborIsDoor) {\n      texture = getImageWithSource(`src/static/assets/textures/${DOOR_SIDE_WALL_TEXTURE_ID}.png`);\n      textureDark = getImageWithSource(`src/static/assets/textures/${DOOR_SIDE_WALL_TEXTURE_DARK_ID}.png`);\n    }\n\n    return {\n      ...this,\n      position,\n      intersectionType: isVertical ? INTERSECTION_TYPES.VERTICAL : INTERSECTION_TYPES.HORIZONTAL,\n      shouldReverseTexture: !neighborIsDoor && (side === OBSTACLE_SIDES.LEFT || side === OBSTACLE_SIDES.BOTTOM),\n      texture,\n      textureDark,\n    };\n  }\n}\n","import { OBSTACLES_MOVE_SPEED, TILE_SIZE } from 'src/constants/config';\n\nimport { StaticObstacle, StaticObstacleParams } from './StaticObstacle';\n\nimport type { Vector, Vertex } from 'src/types';\n\nexport type DynamicObstacleParams = StaticObstacleParams & {\n  initialPosition: DynamicObstacle['_initialPosition'];\n  endPosition: DynamicObstacle['_endPosition'];\n  isMoving: DynamicObstacle['_isMoving'];\n  isMovable: DynamicObstacle['isMovable'];\n  isInFinalPosition: DynamicObstacle['_isInFinalPosition'];\n  isInStartPosition: DynamicObstacle['_isInStartPosition'];\n};\n\nexport abstract class DynamicObstacle extends StaticObstacle {\n  protected _endPositionMatrixCoordinates: Vertex;\n  protected _initialPosition: Vector;\n  protected _endPosition: Vector;\n  protected _isMoving: boolean;\n  protected _isInFinalPosition: boolean;\n  protected _isInStartPosition: boolean;\n\n  public readonly isMovable: boolean;\n\n  protected constructor(params: DynamicObstacleParams) {\n    super(params);\n\n    this._initialPosition = params.initialPosition;\n    this._endPosition = params.endPosition;\n    this._isMoving = params.isMoving;\n    this._isInFinalPosition = params.isInFinalPosition;\n    this._isInStartPosition = params.isInStartPosition;\n\n    this._endPositionMatrixCoordinates = {\n      x: Math.floor(this._endPosition.x1 / TILE_SIZE),\n      y: Math.floor(this._endPosition.y1 / TILE_SIZE),\n    };\n\n    this.isMovable = params.isMovable;\n  }\n\n  get endPositionMatrixCoordinates() {\n    return this._endPositionMatrixCoordinates;\n  }\n\n  get initialPosition() {\n    return this._initialPosition;\n  }\n\n  get endPosition() {\n    return this._endPosition;\n  }\n\n  get isMoving() {\n    return this._isMoving;\n  }\n\n  get isInFinalPosition() {\n    return this._isInFinalPosition;\n  }\n\n  get isInStartPosition() {\n    return this._isInStartPosition;\n  }\n\n  static getPositionChange(startPosition: number, endPosition: number) {\n    if (startPosition > endPosition) {\n      return -OBSTACLES_MOVE_SPEED;\n    }\n\n    if (startPosition < endPosition) {\n      return OBSTACLES_MOVE_SPEED;\n    }\n\n    return 0;\n  }\n\n  move() {\n    if (!this.isMovable) {\n      return true;\n    }\n\n    this._isMoving = true;\n\n    const finalPosition = this._isInStartPosition ? this._endPosition : this._initialPosition;\n\n    this._position = {\n      x1: this._position.x1 + DynamicObstacle.getPositionChange(this._position.x1, finalPosition.x1) * TIME_SCALE,\n      y1: this._position.y1 + DynamicObstacle.getPositionChange(this._position.y1, finalPosition.y1) * TIME_SCALE,\n      x2: this._position.x2 + DynamicObstacle.getPositionChange(this._position.x2, finalPosition.x2) * TIME_SCALE,\n      y2: this._position.y2 + DynamicObstacle.getPositionChange(this._position.y2, finalPosition.y2) * TIME_SCALE,\n    };\n\n    // if reached end position\n    if (\n      Math.round(this._position.x1 * TILE_SIZE) / TILE_SIZE === finalPosition.x1 &&\n      Math.round(this._position.y1 * TILE_SIZE) / TILE_SIZE === finalPosition.y1 &&\n      Math.round(this._position.x2 * TILE_SIZE) / TILE_SIZE === finalPosition.x2 &&\n      Math.round(this._position.y2 * TILE_SIZE) / TILE_SIZE === finalPosition.y2\n    ) {\n      this._position = finalPosition;\n      this._isMoving = false;\n      this._isInStartPosition = !this._isInStartPosition;\n      this._isInFinalPosition = !this._isInFinalPosition;\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { TILE_SIZE } from 'src/constants/config';\n\nimport type { Vector, Vertex } from 'src/types';\n\nexport type StaticObstacleParams = {\n  position: StaticObstacle['_position'];\n  rawValue: StaticObstacle['rawValue'];\n  hasCollision: StaticObstacle['hasCollision'];\n  texture: StaticObstacle['_texture'];\n};\n\nexport abstract class StaticObstacle {\n  protected _position: Vector;\n  protected _matrixCoordinates: Vertex;\n  protected _texture: HTMLImageElement;\n\n  public readonly rawValue: string | number;\n\n  public hasCollision: boolean;\n\n  protected constructor(params: StaticObstacleParams) {\n    this._position = params.position;\n    this._texture = params.texture;\n\n    this._matrixCoordinates = {\n      x: Math.floor(Math.min(this._position.x1, this._position.x2) / TILE_SIZE),\n      y: Math.floor(Math.min(this._position.y1, this._position.y2) / TILE_SIZE),\n    };\n\n    this.hasCollision = params.hasCollision;\n    this.rawValue = params.rawValue;\n  }\n\n  set position(newPosition: Vector) {\n    this._position = newPosition;\n\n    this._matrixCoordinates = {\n      x: Math.floor(Math.min(this._position.x1, this._position.x2) / TILE_SIZE),\n      y: Math.floor(Math.min(this._position.y1, this._position.y2) / TILE_SIZE),\n    };\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set texture(newTexture: HTMLImageElement) {\n    this._texture = newTexture;\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  get matrixCoordinates() {\n    return this._matrixCoordinates;\n  }\n}\n","import { Scene } from './entities/Scene';\n\nimport { EventEmitter } from './services/EventEmitter/EventEmitter';\n\nimport {\n  DEFAULT_FOV,\n  DEFAULT_FOV_DEGREES,\n  DEFAULT_FRAME_DURATION,\n  DEFAULT_RESOLUTION_SCALE,\n  RESOLUTIONS_SCALE_VALUES,\n} from './constants/config';\n\nimport { toRadians } from './utils/maths';\n\nimport type { RawMap } from './types';\n\nexport const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n\nasync function main() {\n  const menu = document.getElementById('menu-container') as HTMLDivElement;\n  const resolutionScaleRange = document.getElementById('resolution-scale') as HTMLInputElement;\n  const fovRange = document.getElementById('fov') as HTMLInputElement;\n  const fovRangeValue = document.getElementById('fovValue') as HTMLInputElement;\n  const continueButton = document.getElementById('continue-button') as HTMLButtonElement;\n\n  let isPaused = false;\n  let resolutionScale = DEFAULT_RESOLUTION_SCALE;\n  let fov = DEFAULT_FOV;\n\n  let emitter = new EventEmitter();\n\n  fovRange.value = String(DEFAULT_FOV_DEGREES);\n  fovRangeValue.innerText = String(DEFAULT_FOV_DEGREES);\n  resolutionScaleRange.value = String(RESOLUTIONS_SCALE_VALUES.indexOf(DEFAULT_RESOLUTION_SCALE));\n\n  const screenData = {\n    height: window.innerHeight,\n    width: window.innerWidth,\n  };\n\n  // eslint-disable-next-line global-require\n  const map: RawMap = await import(`./static/maps/${__MAP__ || 'E1M3'}.json`);\n\n  let scene: Scene;\n\n  const initScene = () => {\n    emitter = new EventEmitter();\n\n    emitter.on('wolfDie', () => initScene());\n\n    scene = new Scene({\n      canvas,\n      map,\n      screenData,\n      emitter,\n      fov,\n      resolutionScale,\n    });\n  };\n\n  initScene();\n\n  const fpsOut = document.getElementById('fps')!;\n  const filterStrength = 20;\n\n  let prevFrameDuration = 0;\n  let frameDuration = 0;\n  let frameTime = 0;\n\n  function handleResize() {\n    emitter.emit('resize', {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  }\n\n  function handleResolutionScaleChange(event: Event) {\n    if (event.target) {\n      resolutionScale = RESOLUTIONS_SCALE_VALUES[Number((event.target as HTMLInputElement).value)];\n\n      emitter.emit('resolutionScaleChange', resolutionScale);\n    }\n  }\n\n  function handleFOVChange(event: Event) {\n    if (event.target) {\n      const degrees = Number((event.target as HTMLInputElement).value);\n      fov = toRadians(degrees);\n\n      fovRangeValue.innerText = (event.target as HTMLInputElement).value;\n\n      emitter.emit('fovChange', fov);\n    }\n  }\n\n  function handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      isPaused = true;\n\n      menu.style.display = 'flex';\n    }\n  }\n\n  function resume() {\n    if (isPaused) {\n      isPaused = false;\n\n      menu.style.display = 'none';\n    }\n  }\n\n  (function frame(currentFrameDuration: number) {\n    if (!isPaused) {\n      emitter.emit('frameUpdate', undefined);\n    }\n\n    scene!.render();\n\n    prevFrameDuration = frameDuration;\n    frameDuration = currentFrameDuration;\n\n    const frameDiff = frameDuration - prevFrameDuration;\n\n    frameTime += (frameDiff - frameTime) / filterStrength;\n\n    TIME_SCALE = Math.min(Math.round((frameDiff / DEFAULT_FRAME_DURATION) * 100) / 100, 1);\n\n    requestAnimationFrame(frame);\n  })(0);\n\n  setInterval(() => {\n    fpsOut.innerHTML = `${(1000 / frameTime).toFixed(1)} fps`;\n  }, 200);\n\n  continueButton.onclick = resume;\n\n  resolutionScaleRange.oninput = handleResolutionScaleChange;\n\n  fovRange.oninput = handleFOVChange;\n\n  window.onkeydown = handleKeyDown;\n  window.addEventListener('resize', handleResize);\n\n  canvas.onclick = () => {\n    canvas.requestPointerLock();\n  };\n}\n\nwindow.onload = main;\n","import { getRelativeChunkMultiplier } from 'src/utils/getRelativeChunkMultiplier';\nimport { getIntersectionVertexWithPlane, getVertexByPositionAndAngle, toRadians } from 'src/utils/maths';\n\nimport type { EventEmitter } from './EventEmitter/EventEmitter';\nimport { Ray } from './Ray';\nimport { canvas } from 'src/main';\n\nimport type { IndexedIntersection, Intersection, Obstacle, ParsedMap, ScreenData, Vector, Vertex } from 'src/types';\nimport { isItem, isSprite, isWall } from 'src/types/typeGuards';\nimport { DEVICE_PIXEL_RATIO } from 'src/constants/config';\n\ntype CameraParams = {\n  emitter: Camera['_emitter'];\n  position: Camera['_position'];\n  screenData: Camera['_screenData'];\n  fov: Camera['_fov'];\n  resolutionScale: Camera['_resolutionScale'];\n};\n\nexport class Camera {\n  private readonly _emitter: EventEmitter;\n\n  private _rays: Ray[];\n  private _position: Vertex;\n  private _angle: number;\n  private _resolutionScale: number;\n  private _fov: number;\n  private _screenData: ScreenData;\n\n  constructor(params: CameraParams) {\n    this._emitter = params.emitter;\n    this._angle = toRadians(180);\n    this._resolutionScale = params.resolutionScale * DEVICE_PIXEL_RATIO;\n    this._fov = params.fov;\n\n    this._screenData = params.screenData;\n    this._position = params.position;\n    this._rays = [];\n\n    this.rotate = this.rotate.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.handleResolutionScaleChange = this.handleResolutionScaleChange.bind(this);\n    this.handleFovChange = this.handleFovChange.bind(this);\n    this.handleWolfDie = this.handleWolfDie.bind(this);\n    this.updatePosition = this.updatePosition.bind(this);\n\n    this.changeRaysAmount();\n    this.registerEvents();\n  }\n\n  get resolutionScale() {\n    return this._resolutionScale;\n  }\n\n  get fov() {\n    return this._fov;\n  }\n\n  get angle() {\n    return this._angle;\n  }\n\n  private registerEvents() {\n    canvas.addEventListener('mousemove', this.rotate);\n\n    this._emitter.on('resize', this.handleResize);\n    this._emitter.on('resolutionScaleChange', this.handleResolutionScaleChange);\n    this._emitter.on('fovChange', this.handleFovChange);\n    this._emitter.on('wolfPositionChange', this.updatePosition);\n    this._emitter.on('wolfDie', this.handleWolfDie);\n  }\n\n  private unregisterEvents() {\n    canvas.removeEventListener('mousemove', this.rotate);\n\n    this._emitter.off('resize', this.handleResize);\n    this._emitter.off('resolutionScaleChange', this.handleResolutionScaleChange);\n    this._emitter.off('fovChange', this.handleFovChange);\n    this._emitter.off('wolfPositionChange', this.updatePosition);\n    this._emitter.off('wolfDie', this.handleWolfDie);\n  }\n\n  private handleWolfDie() {\n    this.unregisterEvents();\n  }\n\n  private handleResize(screenData: Camera['_screenData']) {\n    this._screenData = screenData;\n    this.changeRaysAmount();\n  }\n\n  private handleResolutionScaleChange(resolutionScale: number) {\n    this._resolutionScale = resolutionScale;\n    this.changeRaysAmount();\n  }\n\n  private handleFovChange(fov: number) {\n    this._fov = fov;\n  }\n\n  private updatePosition(position: Camera['_position']) {\n    for (let i = 0; i < this._rays.length; i++) {\n      this._rays[i].move(position);\n    }\n\n    this._position = position;\n  }\n\n  // get intersection vertex from camera angle to obstacle\n  getViewAngleIntersection(position: Vector) {\n    const currentAngleRayEndVertex = getVertexByPositionAndAngle(this._position, this._angle);\n\n    return getIntersectionVertexWithPlane(\n      {\n        x1: this._position.x,\n        y1: this._position.y,\n        x2: currentAngleRayEndVertex.x,\n        y2: currentAngleRayEndVertex.y,\n      },\n      position\n    );\n  }\n\n  getIntersections(parsedMap: ParsedMap, nonGridPlanes: Obstacle[]): IndexedIntersection<Obstacle>[] {\n    const intersections: IndexedIntersection<Obstacle>[] = [];\n\n    for (let i = 0; i < this._rays.length; i++) {\n      const currentIntersections: IndexedIntersection<Obstacle>[] = [];\n\n      let nonGridCastResult = this._rays[i].cast(nonGridPlanes, this._angle);\n      const gridCastResult = this._rays[i].castDDA(parsedMap, this._angle);\n\n      const closestNonHollowGridCast = gridCastResult.reduce<Intersection<Obstacle> | null>((acc, intersection) => {\n        if (!acc && isWall(intersection.obstacle)) {\n          acc = intersection;\n        } else if (acc && isWall(intersection.obstacle) && intersection.distance < acc.distance) {\n          acc = intersection;\n        }\n\n        return acc;\n      }, null);\n\n      if (closestNonHollowGridCast) {\n        nonGridCastResult = nonGridCastResult.filter(\n          (castResult) => castResult.distance < closestNonHollowGridCast.distance\n        );\n      }\n\n      // calculate non grid intersections\n      nonGridCastResult.forEach(({ obstacle, intersectionVertex, distance }) => {\n        const relativeChunkMultiplier = isSprite(obstacle) ? 4 : getRelativeChunkMultiplier(distance);\n        const preparedDistance = Math.round(distance * relativeChunkMultiplier) / relativeChunkMultiplier;\n\n        const intersectionsAmountWithSameDistance = currentIntersections.reduce((acc, intersection) => {\n          if (intersection.distance === preparedDistance) {\n            acc += 1;\n          }\n\n          return acc;\n        }, 0);\n\n        currentIntersections.push({\n          intersectionVertex,\n          obstacle,\n          distance: Math.round(distance * relativeChunkMultiplier) / relativeChunkMultiplier,\n          index: i,\n          layer: intersectionsAmountWithSameDistance,\n        });\n      });\n\n      gridCastResult.forEach(({ obstacle, intersectionVertex, distance }) => {\n        const obstaclePos = obstacle.position;\n\n        const relativeChunkMultiplier = isSprite(obstacle) ? 4 : getRelativeChunkMultiplier(distance);\n\n        let preparedIntersection = intersectionVertex;\n        let preparedDistance = Math.round(distance * relativeChunkMultiplier) / relativeChunkMultiplier;\n\n        let intersectedObstacle: Obstacle | null = null;\n\n        if (isSprite(obstacle) || isItem(obstacle)) {\n          intersectedObstacle = obstacle.rotatePerpendicularlyToView(this._angle);\n\n          const castResult = this._rays[i].cast([intersectedObstacle], this._angle);\n\n          const closest = castResult.sort(\n            ({ distance: distanceA }, { distance: distanceB }) => distanceA - distanceB\n          )[0];\n\n          if (closest) {\n            preparedDistance = Math.round(closest.distance * relativeChunkMultiplier) / relativeChunkMultiplier;\n            preparedIntersection = closest.intersectionVertex;\n          } else {\n            return;\n          }\n        } else if (isWall(obstacle)) {\n          // from grid cast result we get unprepared wall obstacle (with diagonal vector that represents 4 walls)\n          // we need to get wall side with prepared position\n          if (preparedIntersection.y !== obstaclePos.y1 && preparedIntersection.x === obstaclePos.x1) {\n            intersectedObstacle = obstacle.wallSides.LEFT;\n          }\n          if (preparedIntersection.y !== obstaclePos.y1 && preparedIntersection.x === obstaclePos.x2) {\n            intersectedObstacle = obstacle.wallSides.RIGHT;\n          }\n          if (preparedIntersection.y === obstaclePos.y1 && preparedIntersection.x !== obstaclePos.x1) {\n            intersectedObstacle = obstacle.wallSides.TOP;\n          }\n          if (preparedIntersection.y === obstaclePos.y2 && preparedIntersection.x !== obstaclePos.x1) {\n            intersectedObstacle = obstacle.wallSides.BOTTOM;\n          }\n        }\n\n        if (intersectedObstacle) {\n          const intersectionsAmountWithSameDistance = currentIntersections.reduce((acc, intersection) => {\n            if (intersection.distance === preparedDistance) {\n              acc += 1;\n            }\n\n            return acc;\n          }, 0);\n\n          currentIntersections.push({\n            obstacle: intersectedObstacle,\n            distance: preparedDistance,\n            index: i,\n            intersectionVertex: preparedIntersection,\n            layer: intersectionsAmountWithSameDistance,\n          });\n        }\n      });\n\n      intersections.push(...currentIntersections);\n    }\n\n    return intersections;\n  }\n\n  private changeRaysAmount() {\n    this._rays = [];\n\n    const raysAmount = this._screenData.width * this._resolutionScale;\n\n    // you are my hero https://stackoverflow.com/a/55247059/17420897\n    const screenHalfLength = Math.tan(this._fov / 2);\n    const segmentLength = screenHalfLength / (raysAmount / 2);\n\n    for (let i = 0; i < raysAmount; i++) {\n      let rayAngle = this._angle + Math.atan(segmentLength * i - screenHalfLength);\n\n      if (rayAngle < 0) {\n        rayAngle += Math.PI * 2;\n      }\n\n      if (rayAngle > Math.PI * 2) {\n        rayAngle -= Math.PI * 2;\n      }\n\n      this._rays.push(\n        new Ray({\n          angle: rayAngle,\n          initialPosition: this._position,\n        })\n      );\n    }\n  }\n\n  private rotate(event: MouseEvent) {\n    this._angle += toRadians(event.movementX / 3);\n\n    this._angle = this._angle % (2 * Math.PI);\n\n    if (this._angle < 0) {\n      this._angle += 2 * Math.PI;\n    }\n\n    const screenHalfLength = Math.tan(this._fov / 2);\n    const segmentLength = screenHalfLength / ((Math.floor(this._rays.length / 10) * 10) / 2);\n\n    // rotate all rays on camera move\n    for (let i = 0; i < this._rays.length; i++) {\n      let rayAngle = this._angle + Math.atan(segmentLength * i - screenHalfLength);\n\n      if (rayAngle < 0) {\n        rayAngle += Math.PI * 2;\n      }\n\n      if (rayAngle > Math.PI * 2) {\n        rayAngle -= Math.PI * 2;\n      }\n\n      this._rays[i].changeAngle(rayAngle);\n    }\n  }\n}\n","import type { Events } from './eventTypes';\n\ntype CallBack<T> = (data: T) => void;\n\nexport class EventEmitter {\n  private events: { [Key in keyof Events]?: CallBack<Events[Key]>[] } = {};\n\n  on<T extends keyof Events>(event: T, callback: CallBack<Events[T]>) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n\n    this.events[event]!.push(callback);\n  }\n\n  once<T extends keyof Events>(event: T, callback: CallBack<Events[T]>) {\n    const onceListener = (data: Events[T]) => {\n      this.off(event, onceListener);\n\n      callback(data);\n    };\n\n    this.on(event, onceListener);\n  }\n\n  off<T extends keyof Events>(event: T, callback: CallBack<Events[T]>) {\n    if (!this.events[event]) {\n      return;\n    }\n\n    const callbackIndex = this.events[event]!.indexOf(callback);\n\n    if (callbackIndex >= 0) {\n      this.events[event]!.splice(callbackIndex, 1);\n    }\n  }\n\n  emit<T extends keyof Events>(event: T, data: Events[T]) {\n    if (!this.events[event]) {\n      return;\n    }\n\n    this.events[event]!.forEach((callback: CallBack<Events[T]>) => callback(data));\n  }\n}\n","import { Guard } from 'src/entities/actors/Guard';\nimport type { Enemy } from 'src/entities/actors/abstract/Enemy';\nimport { DoorObstacle } from 'src/entities/obstacles/Door';\nimport { ItemObstacle } from 'src/entities/obstacles/Item';\nimport { SpriteObstacle } from 'src/entities/obstacles/Sprite';\nimport { WallObstacle } from 'src/entities/obstacles/Wall';\n\nimport { DOOR_IDS, ENEMY_FACING_DIRECTION_MAP, ITEMS_PURPOSES, TILE_SIZE } from 'src/constants/config';\n\nimport { getImageWithSource } from 'src/utils/getImageWithSource';\nimport { toRadians } from 'src/utils/maths';\n\nimport type { EventEmitter } from './EventEmitter/EventEmitter';\n\nimport type { EnemyState, Obstacle, RawMap, Vector, Vertex } from 'src/types';\n\nexport class MapParser {\n  static getSecretObstaclesEndPositions(map: RawMap) {\n    const secretObstaclesEndPositions: { [id: string]: Vector } = {};\n\n    for (let yAxis = 0; yAxis < map.length; yAxis++) {\n      for (let xAxis = 0; xAxis < map[yAxis].length; xAxis++) {\n        const value = map[yAxis][xAxis];\n\n        if (value && typeof value === 'string') {\n          const params = value.split('_');\n\n          if (params[2] === 'END') {\n            secretObstaclesEndPositions[params[1]] = {\n              x1: xAxis * TILE_SIZE,\n              y1: yAxis * TILE_SIZE,\n              x2: xAxis * TILE_SIZE + TILE_SIZE,\n              y2: yAxis * TILE_SIZE + TILE_SIZE,\n            };\n          }\n        }\n      }\n    }\n\n    return secretObstaclesEndPositions;\n  }\n\n  static createEmptyMap(map: RawMap) {\n    const emptyMatrix = [];\n\n    for (let yAxis = 0; yAxis < map.length; yAxis++) {\n      emptyMatrix.push([]);\n    }\n\n    return emptyMatrix;\n  }\n\n  static parseMap(\n    emitter: EventEmitter,\n    map: RawMap\n  ): {\n    map: (Obstacle | null)[][];\n    obstacles: Obstacle[];\n    startPosition: Vertex;\n    doors: DoorObstacle[];\n    enemies: Enemy[];\n  } {\n    const parsedMap: (Obstacle | null)[][] = this.createEmptyMap(map);\n    const obstacles: Obstacle[] = [];\n    const doors: DoorObstacle[] = [];\n    const enemies: Enemy[] = [];\n\n    let startPosition: Vertex = { x: 0, y: 0 };\n\n    const secretObstaclesEndPositions = this.getSecretObstaclesEndPositions(map);\n\n    for (let yAxis = 0; yAxis < map.length; yAxis++) {\n      for (let xAxis = 0; xAxis < map[yAxis].length; xAxis++) {\n        const value = map[yAxis][xAxis];\n\n        if (!value) {\n          parsedMap[yAxis].push(null);\n\n          continue;\n        }\n\n        if (value) {\n          if (value === 'START_POS') {\n            startPosition = {\n              x: xAxis * TILE_SIZE + TILE_SIZE / 2,\n              y: yAxis * TILE_SIZE + TILE_SIZE / 2,\n            };\n\n            parsedMap[yAxis].push(null);\n\n            continue;\n          }\n\n          const obstacleParams = typeof value === 'number' ? [] : value.split('_');\n          const textureId = typeof value !== 'number' ? Number(obstacleParams[0]) : value;\n\n          if (obstacleParams && obstacleParams.includes('END')) {\n            parsedMap[yAxis].push(null);\n\n            continue;\n          }\n\n          const isNextToVoid = xAxis % 63 === 0 || yAxis % 63 === 0;\n\n          const isEnemy = obstacleParams.includes('ENEMY');\n          const isItem = obstacleParams.includes('ITEM');\n          const isSprite = obstacleParams.includes('SPRITE') || false;\n          const isSecret = !isSprite && obstacleParams.includes('START');\n          const isDoor = !isSprite && DOOR_IDS.includes(textureId);\n          const isMovable = !isSprite && (isDoor || isSecret) && !isNextToVoid;\n          const isWall = !isEnemy && !isItem && !isSprite && !isDoor;\n          const hasCollision = !obstacleParams.includes('HOLLOW');\n\n          let purpose: typeof ITEMS_PURPOSES[keyof typeof ITEMS_PURPOSES] | null = null;\n\n          if (isItem) {\n            purpose = ITEMS_PURPOSES[textureId];\n          }\n\n          const isVertical = !!(map[yAxis][xAxis - 1] && map[yAxis][xAxis + 1]);\n\n          const position = {\n            x1: xAxis * TILE_SIZE + (!isVertical && isDoor ? TILE_SIZE * 0.5 : 0),\n            y1: yAxis * TILE_SIZE + (isVertical && isDoor ? TILE_SIZE * 0.5 : 0),\n            x2: xAxis * TILE_SIZE + (!isVertical && isDoor ? TILE_SIZE * 0.5 : TILE_SIZE),\n            y2: yAxis * TILE_SIZE + (isVertical && isDoor ? TILE_SIZE * 0.5 : TILE_SIZE),\n          };\n\n          const endPosition =\n            isSecret && obstacleParams\n              ? secretObstaclesEndPositions[obstacleParams[1]]\n              : {\n                  x1: isVertical ? position.x1 + TILE_SIZE : position.x1,\n                  y1: !isVertical ? position.y1 - TILE_SIZE : position.y1,\n                  x2: isVertical ? position.x2 + TILE_SIZE : position.x2,\n                  y2: !isVertical ? position.y2 - TILE_SIZE : position.y2,\n                };\n\n          if (isEnemy) {\n            const enemyType = obstacleParams[1].toLowerCase();\n            const enemyState = obstacleParams[2] as EnemyState;\n            const enemyDirection = obstacleParams[3] as keyof typeof ENEMY_FACING_DIRECTION_MAP;\n\n            if (enemyType === 'guard') {\n              const enemy = new Guard({\n                gameMap: null,\n                emitter,\n                rawValue: value,\n                initialAction: null,\n                initialState: enemyState,\n                angle: toRadians(ENEMY_FACING_DIRECTION_MAP[enemyDirection]),\n                position: {\n                  x: (position.x1 + position.x2) / 2,\n                  y: (position.y1 + position.y2) / 2,\n                },\n              });\n\n              enemies.push(enemy);\n              parsedMap[yAxis].push(null);\n            }\n          } else if (isWall) {\n            const wall = new WallObstacle({\n              neighborIsDoorMap: {\n                TOP: !!map[yAxis - 1]?.[xAxis] && DOOR_IDS.includes(map[yAxis - 1][xAxis] as number),\n                RIGHT: !!map[yAxis]?.[xAxis + 1] && DOOR_IDS.includes(map[yAxis][xAxis + 1] as number),\n                BOTTOM: !!map[yAxis + 1]?.[xAxis] && DOOR_IDS.includes(map[yAxis + 1][xAxis] as number),\n                LEFT: !!map[yAxis]?.[xAxis - 1] && DOOR_IDS.includes(map[yAxis][xAxis - 1] as number),\n              },\n              initialPosition: position,\n              position,\n              endPosition,\n              isInFinalPosition: false,\n              isInStartPosition: true,\n              isMovable,\n              isMoving: false,\n              hasCollision,\n              texture: getImageWithSource(`src/static/assets/textures/${textureId}.png`),\n              textureDark: getImageWithSource(`src/static/assets/textures/${textureId + 1}.png`),\n              rawValue: value,\n            });\n\n            parsedMap[yAxis].push(wall);\n            obstacles.push(wall);\n          } else if (isSprite && !isItem) {\n            const sprite = new SpriteObstacle({\n              position,\n              hasCollision,\n              texture: getImageWithSource(\n                `src/static/assets/sprites/${hasCollision ? 'static' : 'hollow'}/${textureId}.png`\n              ),\n              rawValue: value,\n            });\n\n            parsedMap[yAxis].push(sprite);\n            obstacles.push(sprite);\n          } else if (isItem) {\n            const item = new ItemObstacle({\n              position,\n              hasCollision,\n              texture: getImageWithSource(`src/static/assets/sprites/items/${textureId}.png`),\n              rawValue: value,\n              purpose: purpose!,\n            });\n\n            parsedMap[yAxis].push(item);\n            obstacles.push(item);\n          } else if (isDoor) {\n            const door = new DoorObstacle({\n              initialPosition: position,\n              position,\n              endPosition,\n              isInFinalPosition: false,\n              isInStartPosition: true,\n              isMovable,\n              isMoving: false,\n              isVertical,\n              hasCollision,\n              texture: getImageWithSource(`src/static/assets/textures/${textureId}.png`),\n              textureDark: getImageWithSource(`src/static/assets/textures/${textureId + 1}.png`),\n              rawValue: value,\n              closeTimeout: null,\n            });\n\n            parsedMap[yAxis].push(door);\n            obstacles.push(door);\n            doors.push(door);\n          }\n        }\n      }\n    }\n\n    return { map: parsedMap, obstacles, startPosition, doors, enemies };\n  }\n}\n","import { NavigationNode } from './NavigationNode';\n\nimport type { ParsedMap } from 'src/types';\nimport { isDoor, isWall } from 'src/types/typeGuards';\n\nexport class NavigationMap {\n  private _parsedMap: ParsedMap;\n  private _navigationMap: NavigationNode[][];\n\n  constructor(parsedMap: ParsedMap) {\n    this._parsedMap = parsedMap;\n\n    this._navigationMap = this.prepareMap();\n  }\n\n  private prepareMap() {\n    return this._parsedMap.map((row, y) => {\n      return row.map((element, x) => {\n        return new NavigationNode({\n          x,\n          y,\n          isPassable: !element || !element.hasCollision || isDoor(element) || (isWall(element) && element.isMovable),\n          isDoor: isDoor(element),\n          originalObstacle: element,\n        });\n      });\n    });\n  }\n\n  updateMap(parsedMap: ParsedMap) {\n    this._parsedMap = parsedMap;\n    this._navigationMap = this.prepareMap();\n\n    return this.mapCopy;\n  }\n\n  get mapCopy() {\n    return this._navigationMap.map((row) => {\n      return row.map((node) => node.makeCopy());\n    });\n  }\n}\n","import type { Obstacle } from 'src/types';\n\nexport type NavigationNodeParams = {\n  x: NavigationNode['x'];\n  y: NavigationNode['y'];\n  isPassable: NavigationNode['isPassable'];\n  isDoor: NavigationNode['isDoor'];\n  originalObstacle: NavigationNode['originalObstacle'];\n  isVisited?: NavigationNode['isVisited'];\n  previous?: NavigationNode['previous'];\n};\n\nexport class NavigationNode {\n  public readonly x: number;\n  public readonly y: number;\n  public readonly isPassable: boolean;\n  public readonly isDoor: boolean;\n  public readonly originalObstacle: Obstacle | null;\n\n  public isVisited: boolean;\n  public previous: NavigationNode | null;\n\n  constructor(params: NavigationNodeParams) {\n    this.x = params.x;\n    this.y = params.y;\n    this.isPassable = params.isPassable;\n    this.isDoor = params.isDoor;\n    this.originalObstacle = params.originalObstacle;\n\n    this.isVisited = params.isVisited || false;\n    this.previous = params.previous || null;\n  }\n\n  makeCopy(): NavigationNode {\n    return new NavigationNode({\n      x: this.x,\n      y: this.y,\n      isPassable: this.isPassable,\n      isDoor: this.isDoor,\n      originalObstacle: this.originalObstacle,\n      isVisited: this.isVisited,\n      previous: this.previous,\n    });\n  }\n}\n","import { NEIGHBORS_NEXT_TO_CORNERS, NEIGHBOR_OFFSET_WITH_CORNERS } from 'src/constants/config';\n\nimport type { NavigationMap } from './NavigationMap/NavigationMap';\nimport type { NavigationNode } from './NavigationMap/NavigationNode';\n\nimport type { Vertex } from 'src/types';\n\n// bfs\n// todo rewrite to A*\nexport class Pathfinder {\n  private _navigationMap: NavigationMap;\n  private _mapWidth: number;\n  private _mapHeight: number;\n  private _cachedResult: null | NavigationNode;\n  private _cachedStart: null | Vertex;\n  private _cachedEnd: null | Vertex;\n\n  constructor(navigationMap: NavigationMap) {\n    this._navigationMap = navigationMap;\n\n    this._cachedResult = null;\n    this._cachedStart = null;\n    this._cachedEnd = null;\n\n    const copy = this._navigationMap.mapCopy;\n\n    this._mapHeight = copy.length;\n    this._mapWidth = this._mapHeight > 0 ? copy[0].length : 0;\n  }\n\n  checkCache(start: Vertex, end: Vertex) {\n    if (!this._cachedResult || !this._cachedStart || !this._cachedEnd) {\n      return null;\n    }\n\n    if (\n      this._cachedStart.x !== start.x ||\n      this._cachedStart.y !== start.y ||\n      this._cachedEnd.x !== end.x ||\n      this._cachedEnd.y !== end.y\n    ) {\n      this._cachedEnd = null;\n      this._cachedStart = null;\n      this._cachedResult = null;\n    }\n\n    return this._cachedResult;\n  }\n\n  getNodeOrNull(map: NavigationNode[][], x: number, y: number) {\n    if (x < 0 || x >= this._mapWidth || y < 0 || y >= this._mapHeight) {\n      return null;\n    }\n\n    return map[y][x];\n  }\n\n  static getNextFromStart(node: NavigationNode, start: Vertex) {\n    let current = node;\n\n    while (current.previous) {\n      const { previous } = current;\n\n      if (previous.x === start.x && previous.y === start.y) {\n        return current;\n      }\n\n      current = previous;\n    }\n\n    return null;\n  }\n\n  findPath(start: Vertex, end: Vertex, shouldIgnoreClosedDoors = true) {\n    const cachedResult = this.checkCache(start, end);\n\n    if (cachedResult) {\n      return Pathfinder.getNextFromStart(cachedResult, start);\n    }\n\n    const map = this._navigationMap.mapCopy;\n\n    const queue = [map[start.y][start.x]];\n\n    while (queue.length) {\n      const current = queue.shift()!;\n\n      if (current.x === end.x && current.y === end.y) {\n        this._cachedStart = start;\n        this._cachedEnd = end;\n        this._cachedResult = current;\n\n        return Pathfinder.getNextFromStart(current, start);\n      }\n\n      for (const [direction, offset] of Object.entries(NEIGHBOR_OFFSET_WITH_CORNERS)) {\n        const neighbor = this.getNodeOrNull(map, current.x + offset.x, current.y + offset.y);\n\n        if (neighbor && neighbor.isDoor && neighbor.originalObstacle?.hasCollision && !shouldIgnoreClosedDoors) {\n          continue;\n        }\n\n        if (neighbor && !neighbor.isPassable) {\n          neighbor.isVisited = true;\n\n          continue;\n        }\n\n        // check if diagonal movement is blocked by near walls\n        if (neighbor && NEIGHBORS_NEXT_TO_CORNERS[direction as keyof typeof NEIGHBORS_NEXT_TO_CORNERS]) {\n          const neighborsToCheck = NEIGHBORS_NEXT_TO_CORNERS[direction as keyof typeof NEIGHBORS_NEXT_TO_CORNERS];\n\n          const neighborsArePassable = neighborsToCheck.every((neighborOffset) => {\n            const cornerNeighbor = this.getNodeOrNull(\n              map,\n              neighbor.x + neighborOffset.x,\n              neighbor.y + neighborOffset.y\n            );\n\n            return !cornerNeighbor || cornerNeighbor.isPassable;\n          });\n\n          if (!neighborsArePassable) {\n            continue;\n          }\n        }\n\n        if (neighbor && !neighbor.isVisited) {\n          queue.push(neighbor);\n\n          neighbor.isVisited = true;\n          neighbor.previous = current;\n        }\n      }\n    }\n\n    return null;\n  }\n}\n","import { RAY_LENGTH, TILE_SIZE } from 'src/constants/config';\n\nimport {\n  getDistanceBetweenVertexes,\n  getDistanceWithoutFishEyeEffect,\n  getIntersectionVertexWithPlane,\n  unitVector,\n} from 'src/utils/maths';\n\nimport type { Intersection, Obstacle, ParsedMap, Vector, Vertex } from 'src/types';\nimport { isDoor, isDynamicObstacle, isSprite } from 'src/types/typeGuards';\n\ntype RayParams = {\n  angle: Ray['_angle'];\n  initialPosition: Vertex;\n};\n\nexport class Ray {\n  private _angle: number;\n  private _position: Vector;\n\n  constructor(params: RayParams) {\n    this._angle = params.angle;\n    this._position = {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n    };\n\n    this.move(params.initialPosition);\n  }\n\n  get angle() {\n    return this._angle;\n  }\n\n  changeAngle(angle: Ray['_angle']) {\n    this._angle = angle;\n\n    this.move({ x: this._position.x1, y: this._position.y1 });\n  }\n\n  move(position: Vertex) {\n    this._position = {\n      x1: position.x,\n      y1: position.y,\n      x2: position.x + Math.sin(this._angle) * RAY_LENGTH,\n      y2: position.y + Math.cos(this._angle) * RAY_LENGTH,\n    };\n  }\n\n  // optimized casting algorithm, used for obstacles that use map grid\n  // https://www.youtube.com/watch?v=NbSee-XM7WA\n  castDDA(parsedMap: ParsedMap, cameraAngle: number): Intersection<Obstacle>[] {\n    const intersections = [];\n\n    const directionVector = unitVector({\n      x: this._position.x2 - this._position.x1,\n      y: this._position.y2 - this._position.y1,\n    });\n\n    const currentPlayerPosition: Vertex = {\n      x: this._position.x1 / TILE_SIZE,\n      y: this._position.y1 / TILE_SIZE,\n    };\n\n    const currentMapPosition: Vertex = {\n      x: Math.floor(this._position.x1 / TILE_SIZE),\n      y: Math.floor(this._position.y1 / TILE_SIZE),\n    };\n\n    const stepLengthX = Math.abs(1 / directionVector.x);\n    const stepLengthY = Math.abs(1 / directionVector.y);\n\n    let rayLengthX = 0;\n    let rayLengthY = 0;\n\n    let stepX = 1;\n    let stepY = 1;\n\n    if (directionVector.x < 0) {\n      stepX = -1;\n      rayLengthX = (currentPlayerPosition.x - currentMapPosition.x) * stepLengthX;\n    } else {\n      rayLengthX = (currentMapPosition.x + 1 - currentPlayerPosition.x) * stepLengthX;\n    }\n\n    if (directionVector.y < 0) {\n      stepY = -1;\n      rayLengthY = (currentPlayerPosition.y - currentMapPosition.y) * stepLengthY;\n    } else {\n      rayLengthY = (currentMapPosition.y + 1 - currentPlayerPosition.y) * stepLengthY;\n    }\n\n    let intersectionOrigin: 'x' | 'y' = 'x';\n    let distance = 0;\n\n    while (distance < RAY_LENGTH / TILE_SIZE) {\n      if (rayLengthX < rayLengthY) {\n        currentMapPosition.x += stepX;\n        distance = rayLengthX;\n        rayLengthX += stepLengthX;\n        intersectionOrigin = 'x';\n      } else {\n        currentMapPosition.y += stepY;\n        distance = rayLengthY;\n        rayLengthY += stepLengthY;\n        intersectionOrigin = 'y';\n      }\n\n      if (\n        currentMapPosition.x >= 0 &&\n        currentMapPosition.x < 64 &&\n        currentMapPosition.y >= 0 &&\n        currentMapPosition.y < 64\n      ) {\n        if (parsedMap[currentMapPosition.y] && parsedMap[currentMapPosition.y][currentMapPosition.x]) {\n          const intersectedObstacle = parsedMap[currentMapPosition.y][currentMapPosition.x]!;\n\n          if (isDynamicObstacle(intersectedObstacle) && intersectedObstacle.isMoving) {\n            continue;\n          }\n\n          const intersectionPoint: Vertex = {\n            x: currentPlayerPosition.x * TILE_SIZE + directionVector.x * distance * TILE_SIZE,\n            y: currentPlayerPosition.y * TILE_SIZE + directionVector.y * distance * TILE_SIZE,\n          };\n\n          intersectionPoint[intersectionOrigin] = Math.round(intersectionPoint[intersectionOrigin]);\n\n          const fixedDistance = getDistanceWithoutFishEyeEffect(distance * TILE_SIZE, cameraAngle, this._angle);\n\n          if (fixedDistance > TILE_SIZE / 5 || !isSprite(intersectedObstacle)) {\n            intersections.push({\n              obstacle: intersectedObstacle,\n              distance: fixedDistance,\n              intersectionVertex: intersectionPoint,\n            });\n          }\n\n          if (isSprite(intersectedObstacle) || isDoor(intersectedObstacle)) {\n            continue;\n          }\n\n          return intersections;\n        }\n      }\n    }\n\n    return intersections;\n  }\n\n  // non-optimized casting algorithm, used for obstacles that DON'T use map grid\n  cast(obstacles: Obstacle[], cameraAngle: number): Intersection<Obstacle>[] {\n    const intersections: Intersection<Obstacle>[] = [];\n\n    for (const obstacle of obstacles) {\n      const intersectionVertex = getIntersectionVertexWithPlane(this._position, obstacle.position);\n\n      if (intersectionVertex) {\n        const distance = getDistanceBetweenVertexes({ x: this._position.x1, y: this._position.y1 }, intersectionVertex);\n        const fixedDistance = getDistanceWithoutFishEyeEffect(distance, cameraAngle, this._angle);\n\n        // if sprite too close to player, dont count it as intersection\n        if (fixedDistance > TILE_SIZE / 5 || !isSprite(obstacle)) {\n          intersections.push({\n            intersectionVertex,\n            distance: fixedDistance,\n            obstacle,\n          });\n        }\n      }\n    }\n\n    return intersections;\n  }\n}\n","import type { Enemy } from 'src/entities/actors/abstract/Enemy';\nimport type { DoorObstacle } from 'src/entities/obstacles/Door';\nimport type { ItemObstacle } from 'src/entities/obstacles/Item';\nimport type { SpriteObstacle } from 'src/entities/obstacles/Sprite';\nimport type { WallObstacle } from 'src/entities/obstacles/Wall';\n\nexport const isSprite = (plane: unknown): plane is SpriteObstacle => {\n  return !!plane && !!(plane as Partial<SpriteObstacle>).isSprite;\n};\n\nexport const isItem = (plane: unknown): plane is ItemObstacle => {\n  return !!plane && !!(plane as Partial<ItemObstacle>).isItem;\n};\n\nexport const isWall = (plane: unknown): plane is WallObstacle => {\n  return !!plane && !!(plane as Partial<WallObstacle>).isWall;\n};\n\nexport const isDoor = (plane: unknown): plane is DoorObstacle => {\n  return !!plane && !!(plane as Partial<DoorObstacle>).isDoor;\n};\n\nexport const isEnemy = (plane: unknown): plane is Enemy => {\n  return !!plane && !!(plane as Partial<Enemy>).isEnemy;\n};\n\nexport const isDynamicObstacle = (plane: unknown): plane is DoorObstacle | WallObstacle => {\n  return isDoor(plane) || isWall(plane);\n};\n","import { getImageWithSource } from 'src/utils/getImageWithSource';\n\nimport type {\n  EnemyDirectedFrameSet,\n  EnemyDirections,\n  EnemyFrameSetByAction,\n  Frame,\n  HealthFrameSets,\n  PostEffectFrame,\n  WeaponType,\n} from 'src/types';\n\nconst ENEMY_DIRECTIONS: EnemyDirections = [\n  'FRONT',\n  'FRONT_RIGHT',\n  'RIGHT',\n  'BACK_LEFT',\n  'BACK',\n  'BACK_RIGHT',\n  'LEFT',\n  'FRONT_LEFT',\n] as const;\n\nexport function fillWeaponFrameSet(weaponType: WeaponType, duration: number): Frame<HTMLImageElement>[] {\n  const frameSet = [];\n\n  for (let i = 0; i < 5; i++) {\n    frameSet.push(\n      getImageWithSource(\n        `src/static/assets/weapons/${weaponType.toLowerCase()}/${weaponType.toLowerCase()}_frame_${i}.png`\n      )\n    );\n  }\n\n  return frameSet.map((frame) => ({\n    data: frame,\n    duration,\n  }));\n}\n\nexport function fillDirection<T>() {\n  return ENEMY_DIRECTIONS.reduce((acc, key) => {\n    acc[key as EnemyDirections[number]] = [];\n\n    return acc;\n  }, {} as Record<EnemyDirections[number], T[]>);\n}\n\nexport function getEnemyFrameSetByState(type: 'guard'): EnemyDirectedFrameSet {\n  const frameSet: EnemyDirectedFrameSet = {\n    IDLE: fillDirection<Frame<HTMLImageElement>>(),\n    RUN: fillDirection<Frame<HTMLImageElement>>(),\n  };\n\n  for (const key of ENEMY_DIRECTIONS) {\n    frameSet.IDLE[key].push({\n      data: getImageWithSource(`src/static/assets/enemies/${type}/idle/${key.toLowerCase()}_0.png`),\n      duration: Infinity,\n    });\n  }\n\n  for (const key of ENEMY_DIRECTIONS) {\n    for (let i = 0; i < 4; i++) {\n      frameSet.RUN[key].push({\n        data: getImageWithSource(`src/static/assets/enemies/${type}/run/${key.toLowerCase()}_${i}.png`),\n        duration: 200,\n      });\n    }\n  }\n\n  return frameSet;\n}\n\nexport function getEnemyFrameSetByAction(type: 'guard'): EnemyFrameSetByAction {\n  const frameSet: EnemyFrameSetByAction = {\n    SHOOT: [],\n    TAKE_DAMAGE: [],\n    DIE: [],\n  };\n\n  frameSet.TAKE_DAMAGE.push({\n    data: getImageWithSource(`src/static/assets/enemies/${type}/take_damage/0.png`),\n    duration: 150,\n  });\n\n  for (let i = 0; i <= 2; i++) {\n    frameSet.SHOOT.push({\n      data: getImageWithSource(`src/static/assets/enemies/${type}/shoot/${i}.png`),\n      duration: 200,\n    });\n  }\n\n  for (let i = 0; i <= 4; i++) {\n    frameSet.DIE.push({\n      data: getImageWithSource(`src/static/assets/enemies/${type}/die/${i}.png`),\n      duration: i === 4 ? Infinity : 100,\n    });\n  }\n\n  return frameSet;\n}\n\nexport function fillPortraitFrameSet(condition: keyof HealthFrameSets): Frame<HTMLImageElement>[] {\n  const frameSet = [];\n\n  for (let i = 0; i < 3; i++) {\n    frameSet.push(getImageWithSource(`src/static/assets/hud/portrait/${condition.toLowerCase()}/frame_${i}.png`));\n  }\n\n  return [\n    {\n      data: frameSet[0],\n      duration: 2000,\n    },\n    {\n      data: frameSet[1],\n      duration: 750,\n    },\n    {\n      data: frameSet[2],\n      duration: 750,\n    },\n    {\n      data: frameSet[1],\n      duration: 750,\n    },\n    {\n      data: frameSet[0],\n      duration: 1500,\n    },\n    {\n      data: frameSet[1],\n      duration: 1500,\n    },\n    {\n      data: frameSet[2],\n      duration: 200,\n    },\n    {\n      data: frameSet[1],\n      duration: 500,\n    },\n    {\n      data: frameSet[2],\n      duration: 500,\n    },\n    {\n      data: frameSet[1],\n      duration: 500,\n    },\n  ];\n}\n\nexport function generatePostEffectFrameSet(color: [number, number, number]): PostEffectFrame[] {\n  return [\n    {\n      data: { color: `rgba(${color.join(',')}, 0)` },\n      duration: 10000,\n    },\n    {\n      data: { color: `rgba(${color.join(',')}, 0.25)` },\n      duration: 40,\n    },\n    {\n      data: { color: `rgba(${color.join(',')}, 0.2)` },\n      duration: 40,\n    },\n    {\n      data: { color: `rgba(${color.join(',')}, 0.15)` },\n      duration: 40,\n    },\n    {\n      data: { color: `rgba(${color.join(',')}, 0.1)` },\n      duration: 40,\n    },\n    {\n      data: { color: `rgba(${color.join(',')}, 0.05)` },\n      duration: 40,\n    },\n  ];\n}\n","const loaded: Record<string, HTMLImageElement> = {};\n\nexport function getImageWithSource(path: string) {\n  if (loaded[path]) {\n    return loaded[path];\n  }\n\n  const image = new Image();\n  image.src = path;\n\n  loaded[path] = image;\n\n  return image;\n}\n","import { TILE_SIZE } from 'src/constants/config';\n\n// rounding for chunk rendering, Math.round(distance * multiplier) / multiplier, same distance on multiple rays means\n// that we can render these rays in 1 iteration that saves a lot of resources\n// less = more performance, more artifacts\nexport function getRelativeChunkMultiplier(distance: number) {\n  let relativeChunkMultiplier = 1;\n\n  if (distance < TILE_SIZE / 2) {\n    relativeChunkMultiplier = 24;\n  } else if (distance < TILE_SIZE * 3) {\n    relativeChunkMultiplier = 12;\n  } else if (distance < TILE_SIZE * 6) {\n    relativeChunkMultiplier = 2;\n  } else {\n    relativeChunkMultiplier = 1;\n  }\n\n  return relativeChunkMultiplier;\n}\n","import { INTERSECTION_TYPES, TEXTURE_SIZE } from 'src/constants/config';\n\nimport type { IndexedIntersection, Obstacle } from 'src/types';\nimport { isDoor, isItem, isSprite, isWall } from 'src/types/typeGuards';\n\n// we calculate object width in players perspective\n// calculate length from start of the plane to the intersection |object.x - intersection.x| = n\n// then we get coefficient: n / planeLength = k\n// floor(k * TEXTURE_SIZE) = texture offset for given intersection\nexport function getTextureOffset(intersection: IndexedIntersection<Obstacle>) {\n  const { obstacle } = intersection;\n  const { position } = obstacle;\n  const isVerticalIntersection =\n    (isWall(obstacle) || isDoor(obstacle)) && obstacle.intersectionType === INTERSECTION_TYPES.VERTICAL;\n\n  let isInverse = false;\n\n  if (isSprite(obstacle) || isItem(obstacle)) {\n    if (Math.abs(position.x1 - position.x2) > Math.abs(position.y1 - position.y2)) {\n      isInverse = true;\n    }\n  }\n\n  const coordinatesToCompareWith =\n    (isWall(obstacle) || isDoor(obstacle)) && obstacle.shouldReverseTexture\n      ? { x: position.x2, y: position.y2 }\n      : { x: position.x1, y: position.y1 };\n\n  const fromPlaneStartToIntersectionWidth =\n    isVerticalIntersection || isInverse\n      ? coordinatesToCompareWith.x - intersection.intersectionVertex.x\n      : coordinatesToCompareWith.y - intersection.intersectionVertex.y;\n\n  const planeLength =\n    isVerticalIntersection || isInverse ? Math.abs(position.x1 - position.x2) : Math.abs(position.y1 - position.y2);\n\n  const textureDistanceFromStartCoefficient = Math.abs(fromPlaneStartToIntersectionWidth) / planeLength;\n\n  return Math.floor(textureDistanceFromStartCoefficient * TEXTURE_SIZE);\n}\n","import { RAY_LENGTH } from 'src/constants/config';\n\nimport type { Triangle, Vector, Vertex } from 'src/types';\n\nexport function toRadians(angle: number) {\n  return (angle * Math.PI) / 180;\n}\n\nexport function toDegrees(angleRad: number) {\n  return (180 / Math.PI) * angleRad;\n}\n\nexport function clamp(number: number, min: number, max: number) {\n  return Math.max(min, Math.min(number, max));\n}\n\nexport function hasEqualPositionVertex(firstPosition: Vertex, secondPosition: Vertex) {\n  return firstPosition.x === secondPosition.x && firstPosition.y === secondPosition.y;\n}\n\nexport function hasEqualPositionVector(firstPosition: Vector, secondPosition: Vector) {\n  return (\n    firstPosition.x1 === secondPosition.x1 &&\n    firstPosition.y1 === secondPosition.y1 &&\n    firstPosition.x2 === secondPosition.x2 &&\n    firstPosition.y2 === secondPosition.y2\n  );\n}\n\nexport function getAreaSize(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) {\n  return Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);\n}\n\nexport function getAngleBetweenVertexes(vertexAPosition: Vertex, vertexBPosition: Vertex) {\n  const dx = vertexBPosition.x - vertexAPosition.x;\n  const dy = vertexBPosition.y - vertexAPosition.y;\n\n  return Math.atan2(dx, dy);\n}\n\nexport function getVertexByPositionAndAngle(vertex: Vertex, angle: number): Vertex {\n  return {\n    x: vertex.x + RAY_LENGTH * Math.sin(angle),\n    y: vertex.y + RAY_LENGTH * Math.cos(angle),\n  };\n}\n\nexport function getDistanceBetweenVertexes(startVertex: Vertex, endVertex: Vertex) {\n  return Math.sqrt((endVertex.x - startVertex.x) ** 2 + (endVertex.y - startVertex.y) ** 2);\n}\n\nexport function getRangeOfView(angle: number, fov: number, position: Vertex): Triangle {\n  const leftExtremumAngle = angle - fov;\n  const rightExtremumAngle = angle + fov;\n\n  const currentAngleRayEndVertex = getVertexByPositionAndAngle(position, angle);\n  const leftFOVExtremumVertex = getVertexByPositionAndAngle(currentAngleRayEndVertex, leftExtremumAngle);\n  const rightFOVExtremumVertex = getVertexByPositionAndAngle(currentAngleRayEndVertex, rightExtremumAngle);\n\n  return {\n    x1: position.x,\n    y1: position.y,\n    x2: leftFOVExtremumVertex.x,\n    y2: leftFOVExtremumVertex.y,\n    x3: rightFOVExtremumVertex.x,\n    y3: rightFOVExtremumVertex.y,\n  };\n}\n\n// https://www.geeksforgeeks.org/check-whether-a-given-point-lies-inside-a-triangle-or-not/\nexport function getIsVertexInTheTriangle({ x, y }: Vertex, { x1, y1, x2, y2, x3, y3 }: Triangle) {\n  const abcArea = getAreaSize(x1, y1, x2, y2, x3, y3);\n  const pbcArea = getAreaSize(x, y, x2, y2, x3, y3);\n  const pacArea = getAreaSize(x1, y1, x, y, x3, y3);\n  const pabArea = getAreaSize(x1, y1, x2, y2, x, y);\n\n  return Math.round(abcArea) === Math.round(pbcArea + pacArea + pabArea);\n}\n\nexport function vectorSize({ x, y }: Vertex) {\n  return Math.sqrt(x * x + y * y);\n}\n\nexport function unitVector({ x, y }: Vertex) {\n  const magnitude = vectorSize({ x, y });\n\n  return { x: x / magnitude, y: y / magnitude };\n}\n\nexport function getDistanceWithoutFishEyeEffect(distance: number, mainAngle: number, secondaryAngle: number) {\n  return distance * Math.cos(mainAngle - secondaryAngle);\n}\n\nexport function getIntersectionVertexWithPlane(firstVector: Vector, secondVector: Vector) {\n  const { x1, x2, y1, y2 } = firstVector;\n  const { x1: x3, y1: y3, x2: x4, y2: y4 } = secondVector;\n\n  // Check if none of the lines are of length 0\n  if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n    return null;\n  }\n\n  const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\n  // Lines are parallel\n  if (denominator === 0) {\n    return null;\n  }\n\n  const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n  const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\n\n  // is the intersection along the segments\n  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n    return null;\n  }\n\n  // Return a object with the x and y coordinates of the intersection\n  const x = x1 + ua * (x2 - x1);\n  const y = y1 + ua * (y2 - y1);\n\n  return { x, y };\n}\n","import type { WolfParams } from 'src/entities/actors/Wolf';\n\nimport type { EventEmitter } from 'src/services/EventEmitter/EventEmitter';\n\nimport { Animation } from 'src/controllers/Animation';\n\nimport { HUD_WIDTH_COEFFICIENT, TEXTURE_SIZE, WEAPONS } from 'src/constants/config';\nimport {\n  ACTOR_PORTRAIT_FRAME_SETS,\n  FONT_IMAGE,\n  FONT_SYMBOL_HEIGHT,\n  FONT_SYMBOL_WIDTH,\n  HUD_PANEL,\n  PORTRAIT_HEIGHT,\n  PORTRAIT_WIDTH,\n  WEAPON_ICON_HEIGHT,\n  WEAPON_ICON_WIDTH,\n} from 'src/constants/hud';\n\nimport { generatePostEffectFrameSet } from 'src/utils/frameSets';\n\nimport type { Frame, HealthFrameSets, PostEffectFrame, ScreenData } from 'src/types';\n\ntype HudParams = {\n  ctx: Hud['_ctx'];\n  emitter: Hud['_emitter'];\n  screenData: Hud['_screenData'];\n  initialWeapon: keyof typeof WEAPONS;\n};\n\nexport class Hud {\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _screenData: ScreenData;\n  private readonly _weaponAnimation: Animation<Frame<HTMLImageElement>>;\n  private readonly _postEffectAnimation: Animation<PostEffectFrame>;\n  private readonly _portraitAnimation: Animation<Frame<HTMLImageElement>>;\n  private readonly _emitter: EventEmitter;\n\n  private _currentFrameSet: HealthFrameSets[keyof HealthFrameSets];\n  private _scale: number;\n  private _width: number;\n  private _height: number;\n  private _offsetX: number;\n  private _offsetY: number;\n\n  constructor(params: HudParams) {\n    this._ctx = params.ctx;\n    this._screenData = params.screenData;\n    this._currentFrameSet = ACTOR_PORTRAIT_FRAME_SETS.HEALTHY;\n    this._emitter = params.emitter;\n\n    this._scale = (this._screenData.width * HUD_WIDTH_COEFFICIENT) / HUD_PANEL.WIDTH;\n\n    this._width = Math.round(this._screenData.width * HUD_WIDTH_COEFFICIENT);\n    this._height = Math.round(HUD_PANEL.HEIGHT * this._scale);\n\n    this._offsetX = this._screenData.width / 2 - this._width / 2;\n    this._offsetY = this._screenData.height - this._height;\n\n    this._portraitAnimation = new Animation({\n      renderFunction: this.renderPortrait.bind(this),\n      frameSet: this._currentFrameSet,\n      initialFrameIdx: 0,\n      isLoopAnimation: true,\n      emitter: this._emitter,\n    });\n\n    this._weaponAnimation = new Animation({\n      renderFunction: this.renderWeapon.bind(this),\n      initialFrameIdx: 0,\n      isLoopAnimation: false,\n      frameSet: WEAPONS[params.initialWeapon].frameSet,\n      emitter: this._emitter,\n    });\n\n    this._postEffectAnimation = new Animation({\n      renderFunction: this.renderPostEffect.bind(this),\n      initialFrameIdx: 0,\n      isLoopAnimation: false,\n      frameSet: generatePostEffectFrameSet([255, 255, 0]),\n      emitter: this._emitter,\n    });\n\n    this.registerEvents();\n  }\n\n  static getHealthFrameSet(health: number): HealthFrameSets[keyof HealthFrameSets] {\n    if (health > 85) {\n      return ACTOR_PORTRAIT_FRAME_SETS.HEALTHY;\n    }\n\n    if (health > 75) {\n      return ACTOR_PORTRAIT_FRAME_SETS.JUST_A_SCRATCH;\n    }\n\n    if (health > 50) {\n      return ACTOR_PORTRAIT_FRAME_SETS.MINOR_DAMAGE;\n    }\n\n    if (health > 35) {\n      return ACTOR_PORTRAIT_FRAME_SETS.MODERATE_DAMAGE;\n    }\n\n    if (health > 20) {\n      return ACTOR_PORTRAIT_FRAME_SETS.SEVERE_DAMAGE;\n    }\n\n    if (health > 5) {\n      return ACTOR_PORTRAIT_FRAME_SETS.SUFFERING;\n    }\n\n    if (health > 0) {\n      return ACTOR_PORTRAIT_FRAME_SETS.NEAR_DEATH;\n    }\n\n    return ACTOR_PORTRAIT_FRAME_SETS.DEAD;\n  }\n\n  private registerEvents() {\n    this._emitter.on('wolfWeaponChange', this.onWeaponChange.bind(this));\n    this._emitter.on('wolfBoostPickup', this.onBoostPickup.bind(this));\n    this._emitter.on('wolfAttack', this.onAttack.bind(this));\n    this._emitter.on('wolfHit', this.onWolfHit.bind(this));\n  }\n\n  private renderPostEffect(data: PostEffectFrame['data']) {\n    this._ctx.fillStyle = data.color;\n    this._ctx.fillRect(0, 0, this._screenData.width, this._screenData.height);\n  }\n\n  private renderWeapon(texture: HTMLImageElement) {\n    const hudHeight = ((this._screenData.width * HUD_WIDTH_COEFFICIENT) / HUD_PANEL.WIDTH) * HUD_PANEL.HEIGHT;\n    const weaponSize = this._screenData.height - hudHeight;\n    const xOffset = this._screenData.width / 2 - weaponSize / 2;\n    const yOffset = this._screenData.height - weaponSize - hudHeight;\n\n    this._ctx.drawImage(texture, 0, 0, TEXTURE_SIZE, TEXTURE_SIZE, xOffset, yOffset, weaponSize, weaponSize);\n  }\n\n  private renderPortrait(image: HTMLImageElement) {\n    const textureXPositionOnScreen = this._offsetX + Math.round(HUD_PANEL.PORTRAIT_X_OFFSET * this._scale);\n    const textureYPositionOnScreen = this._offsetY + Math.round(HUD_PANEL.PORTRAIT_Y_OFFSET * this._scale);\n\n    this._ctx.drawImage(\n      image,\n      0,\n      0,\n      PORTRAIT_WIDTH,\n      PORTRAIT_HEIGHT,\n      textureXPositionOnScreen,\n      textureYPositionOnScreen,\n      Math.round(PORTRAIT_WIDTH * this._scale),\n      Math.round(PORTRAIT_HEIGHT * this._scale)\n    );\n  }\n\n  private renderText(value: number, segmentXOffset: number) {\n    const stringValue = String(value);\n    const valueWidth = Math.ceil(stringValue.length * FONT_SYMBOL_WIDTH * this._scale);\n\n    for (let i = 0; i < stringValue.length; i++) {\n      const number = Number(stringValue[i]);\n\n      const textureOffset = number * FONT_SYMBOL_WIDTH;\n      const numberOffset = i * FONT_SYMBOL_WIDTH;\n\n      const textureXPositionOnScreen =\n        this._offsetX + segmentXOffset + Math.ceil(numberOffset * this._scale) - valueWidth / 2;\n      const textureYPositionOnScreen = this._offsetY + Math.ceil(HUD_PANEL.INFO_Y_OFFSET * this._scale);\n\n      this._ctx.drawImage(\n        FONT_IMAGE,\n        textureOffset,\n        0,\n        FONT_SYMBOL_WIDTH,\n        FONT_SYMBOL_HEIGHT,\n        textureXPositionOnScreen,\n        textureYPositionOnScreen,\n        Math.ceil(FONT_SYMBOL_WIDTH * this._scale),\n        Math.ceil(FONT_SYMBOL_HEIGHT * this._scale)\n      );\n    }\n  }\n\n  private onWeaponChange(newWeapon: keyof typeof WEAPONS) {\n    this._weaponAnimation.updateFrameSet(WEAPONS[newWeapon].frameSet);\n  }\n\n  private onBoostPickup() {\n    this._postEffectAnimation.updateFrameSet(generatePostEffectFrameSet([255, 255, 0]));\n    this._postEffectAnimation.playAnimation();\n  }\n\n  private onWolfHit() {\n    this._postEffectAnimation.updateFrameSet(generatePostEffectFrameSet([255, 0, 0]));\n    this._postEffectAnimation.playAnimation();\n  }\n\n  private onAttack() {\n    this._weaponAnimation.setActiveFrameIdx(0);\n    this._weaponAnimation.playAnimation();\n  }\n\n  render({\n    ammo,\n    lives,\n    score,\n    health,\n    currentWeapon,\n    level,\n  }: {\n    ammo: WolfParams['ammo'];\n    lives: WolfParams['lives'];\n    score: WolfParams['score'];\n    health: WolfParams['health'];\n    currentWeapon: WolfParams['currentWeapon'];\n    level: WolfParams['level'];\n  }) {\n    const updatedHealthFrameSet = Hud.getHealthFrameSet(health);\n\n    if (updatedHealthFrameSet !== this._currentFrameSet) {\n      this._currentFrameSet = updatedHealthFrameSet;\n      this._portraitAnimation.updateFrameSet(this._currentFrameSet);\n    }\n\n    this._scale = (this._screenData.width * HUD_WIDTH_COEFFICIENT) / HUD_PANEL.WIDTH;\n\n    this._width = Math.round(this._screenData.width * HUD_WIDTH_COEFFICIENT);\n    this._height = Math.round(HUD_PANEL.HEIGHT * this._scale);\n\n    this._offsetX = this._screenData.width / 2 - this._width / 2;\n    this._offsetY = this._screenData.height - this._height;\n\n    this._postEffectAnimation.render();\n\n    this._ctx.drawImage(\n      HUD_PANEL.TEXTURE,\n      0,\n      0,\n      HUD_PANEL.WIDTH,\n      HUD_PANEL.HEIGHT,\n      this._offsetX,\n      this._offsetY,\n      this._width,\n      this._height\n    );\n\n    this._ctx.drawImage(\n      WEAPONS[currentWeapon].icon,\n      0,\n      0,\n      WEAPON_ICON_WIDTH,\n      WEAPON_ICON_HEIGHT,\n      this._offsetX + Math.round(HUD_PANEL.WEAPON_X_OFFSET * this._scale),\n      this._offsetY + Math.round(HUD_PANEL.WEAPON_Y_OFFSET * this._scale),\n      Math.round(WEAPON_ICON_WIDTH * this._scale),\n      Math.round(WEAPON_ICON_HEIGHT * this._scale)\n    );\n\n    this.renderText(level, HUD_PANEL.LEVEL_X_OFFSET * this._scale);\n    this.renderText(score, HUD_PANEL.SCORE_X_OFFSET * this._scale);\n    this.renderText(lives, HUD_PANEL.LIVES_X_OFFSET * this._scale);\n    this.renderText(health, HUD_PANEL.HEALTH_X_OFFSET * this._scale);\n    this.renderText(ammo, HUD_PANEL.AMMO_X_OFFSET * this._scale);\n\n    this._weaponAnimation.render();\n    this._portraitAnimation.render();\n  }\n}\n","import type { Enemy } from 'src/entities/actors/abstract/Enemy';\n\nimport { MAP_SCALE, TILE_SIZE } from 'src/constants/config';\n\nimport type { Obstacle, Vertex } from 'src/types';\nimport { isWall } from 'src/types/typeGuards';\n\ntype MinimapParams = {\n  ctx: Minimap['_ctx'];\n  obstacles: Minimap['_obstacles'];\n  rowsLength: Minimap['_rowsLength'];\n};\n\nexport class Minimap {\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _obstacles: Obstacle[];\n  private readonly _rowsLength: number;\n\n  constructor(params: MinimapParams) {\n    this._ctx = params.ctx;\n    this._obstacles = params.obstacles;\n    this._rowsLength = params.rowsLength;\n  }\n\n  render(position: Vertex, enemies: Enemy[]) {\n    const height = this._rowsLength * TILE_SIZE;\n\n    // walls and secrets\n    for (const obstacle of this._obstacles) {\n      if (isWall(obstacle) && obstacle.isMovable) {\n        this._ctx.fillStyle = 'orange';\n      } else {\n        this._ctx.fillStyle = 'white';\n      }\n\n      if (isWall(obstacle)) {\n        // reverse by y\n        this._ctx.fillRect(\n          obstacle.initialPosition.x1 * MAP_SCALE,\n          (height - obstacle.initialPosition.y1 - TILE_SIZE) * MAP_SCALE,\n          TILE_SIZE * MAP_SCALE,\n          TILE_SIZE * MAP_SCALE\n        );\n      }\n    }\n\n    // enemies\n    for (const enemy of enemies) {\n      this._ctx.fillStyle = 'red';\n\n      const endPosition = {\n        x: enemy.position.x + (TILE_SIZE / MAP_SCALE) * Math.sin(enemy.angle),\n        y: enemy.position.y + (TILE_SIZE / MAP_SCALE) * Math.cos(enemy.angle),\n      };\n\n      this._ctx.strokeStyle = 'orange';\n      this._ctx.beginPath();\n      this._ctx.moveTo(enemy.position.x * MAP_SCALE, (height - enemy.position.y) * MAP_SCALE);\n      this._ctx.lineTo(endPosition.x * MAP_SCALE, (height - endPosition.y) * MAP_SCALE);\n      this._ctx.closePath();\n      this._ctx.stroke();\n\n      this._ctx.beginPath();\n      this._ctx.ellipse(\n        enemy.position.x * MAP_SCALE,\n        (height - enemy.position.y) * MAP_SCALE,\n        TILE_SIZE * 0.8 * MAP_SCALE,\n        TILE_SIZE * 0.8 * MAP_SCALE,\n        0,\n        0,\n        360\n      );\n      this._ctx.closePath();\n      this._ctx.fill();\n    }\n\n    // wolf\n    this._ctx.fillStyle = 'blue';\n\n    this._ctx.beginPath();\n    this._ctx.ellipse(\n      position.x * MAP_SCALE,\n      (height - position.y) * MAP_SCALE,\n      TILE_SIZE * 0.8 * MAP_SCALE,\n      TILE_SIZE * 0.8 * MAP_SCALE,\n      0,\n      0,\n      360\n    );\n    this._ctx.closePath();\n    this._ctx.fill();\n  }\n}\n"],"names":["_obj","_obj2","TILE_SIZE","DEVICE_PIXEL_RATIO","window","devicePixelRatio","HALF_TILE_SIZE","RAY_LENGTH","DOOR_IDS","AMMO_ID","DOOR_SIDE_WALL_TEXTURE_ID","DOOR_SIDE_WALL_TEXTURE_DARK_ID","TEXTURE_SIZE","DEFAULT_FRAME_DURATION","RESOLUTIONS_SCALE_VALUES","DOOR_TIMEOUT","HUD_WIDTH_COEFFICIENT","MAP_SCALE","OBSTACLES_MOVE_SPEED","ACTOR_SPEED","ENEMY_FOV","toRadians","WOLF_ATTACK_FOV","DEFAULT_FOV_DEGREES","DEFAULT_FOV","DEFAULT_RESOLUTION_SCALE","TIME_SCALE","WEAPONS","KNIFE","frameSet","fillWeaponFrameSet","maxDistance","minDamage","maxDamage","frameDuration","ammoPerAttack","attackFrameIdx","noiseDistance","icon","getImageWithSource","PISTOL","MACHINE_GUN","ITEMS_PURPOSES","affects","value","INTERSECTION_TYPES","VERTICAL","HORIZONTAL","OBSTACLE_SIDES","TOP","BOTTOM","LEFT","RIGHT","NEIGHBOR_OFFSET","x","y","NEIGHBOR_OFFSET_WITH_CORNERS","NEIGHBORS_NEXT_TO_CORNERS","ENEMY_FACING_DIRECTION_MAP","WEST","NORTH","EAST","SOUTH","HUD_PANEL","TEXTURE","WIDTH","HEIGHT","INFO_Y_OFFSET","WEAPON_Y_OFFSET","LEVEL_X_OFFSET","SCORE_X_OFFSET","LIVES_X_OFFSET","HEALTH_X_OFFSET","AMMO_X_OFFSET","WEAPON_X_OFFSET","PORTRAIT_X_OFFSET","PORTRAIT_Y_OFFSET","FONT_IMAGE","FONT_SYMBOL_WIDTH","FONT_SYMBOL_HEIGHT","WEAPON_ICON_WIDTH","WEAPON_ICON_HEIGHT","PORTRAIT_WIDTH","PORTRAIT_HEIGHT","ACTOR_PORTRAIT_FRAME_SETS","HEALTHY","fillPortraitFrameSet","JUST_A_SCRATCH","MINOR_DAMAGE","MODERATE_DAMAGE","SEVERE_DAMAGE","SUFFERING","NEAR_DEATH","DEAD","data","duration","Animation","param","emitter","initialFrameIdx","isLoopAnimation","renderFunction","onAnimationEnd","onAnimationStart","onFrameChange","_frameSet","_currentFrameIdx","_derivedRenderFunction","_isLoopAnimation","_onAnimationEnd","_onAnimationStart","_onFrameChange","_timeout","Timeout","playAnimation","bind","currentFrame","Infinity","set","key","callback","isExpired","length","reset","updateFrameSet","setActiveFrameIdx","frameIdx","Error","concat","render","onTimeoutExpire","_timeoutTime","_onTimeoutExpire","_emitter","registerEvents","on","update","Date","getTime","timeoutDuration","GameMap","rawMap","_MapParser_parseMap","obstacles","doors","enemies","map","startPosition","_map","_navigationMap","NavigationMap","_obstacles","_doors","_enemies","_currentlyMovingObstacles","_wolfMatrixPosition","Math","floor","emit","updateWolfMatrixPosition","spawnAmmoOnDeadEnemy","position","enemy","currentEntity","currentMatrixPosition","isItem","purpose","ItemObstacle","x1","y1","x2","y2","hasCollision","texture","rawValue","interactWithObstacle","obstacle","isDoor","isWall","isMovable","includes","push","forEach","animationEnded","move","isInStartPosition","closeTimeout","endPositionMatrixCoordinates","matrixCoordinates","updateMap","filter","movingObstacle","Scene","params","_canvas","canvas","_ctx","getContext","_screenData","screenData","_gameMap","_hud","Hud","ctx","initialWeapon","_wolf","Wolf","ammo","currentWeapon","health","level","lives","maxHealth","score","weapons","resolutionScale","fov","gameMap","_minimap","Minimap","rowsLength","resize","handleWolfAttack","handleWolfInteract","width","height","getNonGridObstaclesInView","nonGridObstacles","_this__wolf","angle","camera","rangeOfView","getRangeOfView","reduce","acc","isEnemy","getPreparedSprite","obstaclePos","wallSides","isLookingAt","getViewAngleIntersection","_obstacle_position","getIsVertexInTheTriangle","attackRange","closestEnemy","enemiesInAttackRange","currentAction","enemyPositionVector","castResult","castToPosition","distance","isVisible","sort","nextEnemy","nextCastResult","weapon","damageMultiplier","damage","clamp","hit","obstacleInViewIndex","obstacleInView","i","intersection","sqrt","pow","imageSmoothingEnabled","beginPath","clearRect","closePath","fillStyle","fillRect","ceil","sortedAndMergedIntersections","getIntersections","a","b","layer","chunk","startTextureOffsetX","startIndex","isInitial","rays","index","isSpriteObstacle","isSprite","nextIntersection","textureOffsetX","getTextureOffset","nextTextureOffset","sameLayer","sameObstacle","sameOrNextIndex","sameDistance","sameTextureId","sameTextureOffset","isHorizontalIntersection","intersectionType","textureHeight","PI","textureDark","totalTextureOffsetX","textureWidth","abs","textureSize","textureXPositionOnScreen","textureYPositionOnScreen","textureWidthOnScreen","drawImage","Guard","speed","viewDistance","attackDistance","attackDelayTime","attackBaseDamage","stateFrameSet","getEnemyFrameSetByState","actionFrameSet","getEnemyFrameSetByAction","Enemy","_ammo","_score","_lives","_level","_weapons","_camera","Camera","_position","handleWolfHit","handleMouseEvent","handleKeyDown","handleKeyUp","addEventListener","unregisterEvents","removeEventListener","off","_health","_currentWeapon","_attackTimeout","undefined","event","changeWeapon","keyCode","preventDefault","_verticalSpeed","_horizontalSpeed","buttons","_isAttacking","weaponType","attack","canAttack","handleCollisionIfOccurs","updatedPosition","doesCollide","isInFinalPosition","preparedObstaclePosition","expandedObstacleVector","_maxHealth","verticalChangeX","sin","verticalChangeY","cos","horizontalChangeX","horizontalChangeY","xSum","ySum","min","max","positionOnMap","Actor","_rawValue","registerActorEvents","SIDE","HALF_SIDE","_stateFrameSet","_actionFrameSet","_currentFrameSetName","_currentState","initialState","_currentAction","_currentSide","directedFrameSet","initialFrameSet","_animationController","_sprite","SpriteObstacle","_angle","_initialAngle","_initialMatrixPosition","_targetMatrixPosition","_wolfPosition","_viewDistance","_attackDistance","_attackDelayTime","_attackFrameIdx","_attackBaseDamage","_speed","initialAction","handleGameMapReady","handleWolfPositionChange","checkNoise","_pathfinder","updateActiveFrameSet","onCurrentFrameSetNameChange","onCurrentStateChange","onCurrentActionChange","setCurrentAction","checkForWolfInView","distanceToWolf","getDistanceBetweenVertexes","damageRatio","round","Pathfinder","navigationMap","die","setCurrentState","_this__pathfinder","findPath","angleBetweenEnemyAndWolf","getAngleBetweenVertexes","closest","ray","Ray","initialPosition","castDDA","distanceA","distanceB","newAction","setCurrentFrameSetName","newFrameSetName","newState","wolfPosition","target","_this__gameMap","nextNavigationNode","originalObstacle","movingDirection","unitVector","atan2","tooClose","wolfAngle","newSide","currentFrameIdx","rotatePerpendicularlyToView","hasEqualPositionVertex","DoorObstacle","_textureDark","isVertical","shouldReverseTexture","DynamicObstacle","middleVertex","spriteAngle","StaticObstacle","WallObstacle","_neighborIsDoorMap","neighborIsDoorMap","_wallSides","getWallSide","newTextureDark","result","side","neighborIsDoor","_texture","_initialPosition","_endPosition","endPosition","_isMoving","isMoving","_isInFinalPosition","_isInStartPosition","_endPositionMatrixCoordinates","finalPosition","getPositionChange","_matrixCoordinates","newPosition","newTexture","document","getElementById","_main","menu","resolutionScaleRange","fovRange","fovRangeValue","continueButton","isPaused","scene","initScene","fpsOut","prevFrameDuration","frameTime","handleResize","innerWidth","innerHeight","handleResolutionScaleChange","Number","handleFOVChange","degrees","innerText","style","display","resume","EventEmitter","String","frame","currentFrameDuration","frameDiff","requestAnimationFrame","setInterval","innerHTML","toFixed","onclick","oninput","onkeydown","requestPointerLock","onload","_resolutionScale","_fov","_rays","rotate","handleFovChange","handleWolfDie","updatePosition","changeRaysAmount","currentAngleRayEndVertex","getVertexByPositionAndAngle","getIntersectionVertexWithPlane","parsedMap","nonGridPlanes","currentIntersections","nonGridCastResult","cast","gridCastResult","closestNonHollowGridCast","intersectionVertex","relativeChunkMultiplier","getRelativeChunkMultiplier","preparedDistance","intersectionsAmountWithSameDistance","preparedIntersection","intersectedObstacle","_intersections","intersections","raysAmount","screenHalfLength","tan","segmentLength","rayAngle","atan","movementX","changeAngle","events","once","onceListener","callbackIndex","indexOf","splice","MapParser","getSecretObstaclesEndPositions","secretObstaclesEndPositions","yAxis","xAxis","split","createEmptyMap","emptyMatrix","parseMap","obstacleParams","textureId","isNextToVoid","isSecret","enemyType","toLowerCase","enemyState","enemyDirection","_map_","_map_yAxis","_map_1","_map_yAxis1","wall","sprite","item","door","_parsedMap","prepareMap","row","element","NavigationNode","isPassable","mapCopy","node","makeCopy","isVisited","previous","_cachedResult","_cachedStart","_cachedEnd","copy","_mapHeight","_mapWidth","checkCache","start","end","getNodeOrNull","shouldIgnoreClosedDoors","cachedResult","getNextFromStart","queue","current","shift","_iteratorError","Object","entries","_neighbor_originalObstacle","direction","offset","neighbor","neighborsToCheck","every","neighborOffset","cornerNeighbor","cameraAngle","directionVector","currentPlayerPosition","currentMapPosition","stepLengthX","stepLengthY","rayLengthX","rayLengthY","stepX","stepY","intersectionOrigin","isDynamicObstacle","intersectionPoint","fixedDistance","getDistanceWithoutFishEyeEffect","plane","ENEMY_DIRECTIONS","fillDirection","type","IDLE","RUN","_iteratorError1","key1","SHOOT","TAKE_DAMAGE","DIE","i1","condition","generatePostEffectFrameSet","color","join","loaded","path","image","Image","src","isVerticalIntersection","isInverse","coordinatesToCompareWith","textureDistanceFromStartCoefficient","number","firstPosition","secondPosition","getAreaSize","x3","y3","vertexAPosition","vertexBPosition","vertex","startVertex","endVertex","leftExtremumAngle","rightExtremumAngle","leftFOVExtremumVertex","rightFOVExtremumVertex","param1","pbcArea","magnitude","mainAngle","secondaryAngle","firstVector","secondVector","x4","y4","denominator","ua","ub","_currentFrameSet","_scale","_width","_height","_offsetX","_offsetY","_portraitAnimation","renderPortrait","_weaponAnimation","renderWeapon","_postEffectAnimation","renderPostEffect","onWeaponChange","onBoostPickup","onAttack","onWolfHit","hudHeight","weaponSize","xOffset","yOffset","renderText","segmentXOffset","stringValue","valueWidth","textureOffset","numberOffset","newWeapon","updatedHealthFrameSet","getHealthFrameSet","_rowsLength","strokeStyle","moveTo","lineTo","stroke","ellipse","fill"],"mappings":"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"}